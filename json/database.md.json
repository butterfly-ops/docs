{
    "file_name": "database.md",
    "sections": [
        {
            "header": "Introduction",
            "content": "\n<p>Butterfly uses multi-layer database management. It's possible to use multiple databases at the same time. You can configure multiple databases and use it. Butterfly uses MySQL as the primary database.\nAll Butterfly related data is stored in MySQL but you can use the following database drivers: </p>\n<ul>\n<li>MySQL 5.6+</li>\n<li>ElasticSearch 7+</li>\n<li>MongoDB</li>\n<li><em>Redis</em></li>\n<li><em>MSSQL</em></li>\n<li><em>Oracle Database</em></li>\n</ul>\n<p>When you check MySQL and other database implementations you will see that it's written to make developer comfortable whether you \nare using MySQL or ElasticSearch. We have built a system with same behaviours independent from which driver you use.</p>\n<p>Why you should mess with Elastic Search complex JSON Queries if there is a better solution. You don't need anymore. Just give a shot to Butterfly \nimplementations.</p>\n<blockquote>\n<p>[!TIP]\nButterfly Database Layer syntax is inspired by <a href=\"https://laravel.com\">Laravel</a> </p>\n</blockquote>\n"
        },
        {
            "header": "MySQL",
            "content": "\n"
        },
        {
            "header": "Introduction",
            "content": "\n<p>Butterfly MySQL Implementation syntax is inspired from Laravel. Core aim of implementation is to maintain readability besides having performant queries. \nYou can generate performant queries easily by using built-in functions.  </p>\n"
        },
        {
            "header": "Configuration",
            "content": "\n<p>The database configurations are stored in <code>app/config/database.php</code>. Configurations can be customized by domain name with subfolders.\nExample configuration:</p>\n<p>```php\n&lt;?php</p>\n<p>return [\n    'default' =&gt; [\n        'server' =&gt; 'localhost',\n        'adapter' =&gt; 'MySQL',\n        'name' =&gt; 'DB_NAME',\n        'user' =&gt; 'DB_USERNAME',\n        'password' =&gt; 'DB_PASSWORD',\n        'port' =&gt; 3306 // Optional\n    ],</p>\n<pre><code>'external' =&gt; [\n    'server' =&gt; 'EXTERNAL_SERVER_IP',\n    'adapter' =&gt; 'MySQL',\n    'name' =&gt; 'DB_NAME',\n    'user' =&gt; 'DB_USERNAME',\n    'password' =&gt; 'DB_PASSWORD',\n    'port' =&gt; 3306 // Optional \n]\n</code></pre>\n<p>];\n```</p>\n<h3>Slave Database</h3>\n<p>Butterfly uses slave database if it's defined. If not, it uses default database for the SELECT operations.</p>\n<h3>Using The Database Client</h3>\n<p>Database client can be reached using <code>db()</code> helper. You can also reach defined databases using the database alias as the first parameter.</p>\n<p><code>php\ndb(); // Database Alias defaults to default database.</code></p>\n<p>Following function call will return a database client connected to database external defined in configuration.</p>\n<p><code>php\ndb('external');</code></p>\n"
        },
        {
            "header": "Transactions",
            "content": "\n<p>You can begin, rollback or commit a transaction.</p>\n<h3>Begin</h3>\n<p><code>php\ndb()-&gt;transaction();</code></p>\n<h3>Commit</h3>\n<p>```php\ndb()-&gt;commit();\n````</p>\n<h3>Rollback</h3>\n<p><code>php\ndb()-&gt;rollback();</code></p>\n<h3>Example Usage</h3>\n<p>```php\ndb()-&gt;transaction();\ntry {\n    $id = db()-&gt;table('orders')-&gt;insert([\n        'customer_id' =&gt; 1\n    ]);</p>\n<pre><code>db()-&gt;table('order_items')-&gt;insert([\n    'order_id' =&gt; $id\n]);\n\ndb()-&gt;commit();\n</code></pre>\n<p>} catch(\\Exception $e)\n{\n    db()-&gt;rollback();\n}\n```</p>\n"
        },
        {
            "header": "Running Queries",
            "content": "\n<h3>SELECT Queries</h3>\n<p><code>php\n$users = db()\n   -&gt;from('users')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users;</code> </p>\n<p>and return all results as associative array.</p>\n<h4>Specifying Columns</h4>\n<p>You may want to return specific columns:</p>\n<h5>Column List</h5>\n<p><code>php\n$users = db()\n    -&gt;from('users', ['id', 'name'])\n    -&gt;get();</code></p>\n<h5>Column List with Alias</h5>\n<p>You can also use aliases using following example:</p>\n<p><code>php\n$users = db()-&gt;from('users', [\n    '*',\n    'relation_id' =&gt; 'object_relations.id'\n])\n    -&gt;where('id', 5)\n    -&gt;orderBy('id DESC')\n    -&gt;get();</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nSELECT *,object_relations.id AS relation_id FROM users WHERE id = :param_1 ORDER BY id DESC</code></p>\n<h4>Where</h4>\n<p>You can write where clauses in many ways. Examples are the following:</p>\n<p><code>php\n$user = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;first();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE id = 5;</code> </p>\n<p>and return one row as associative array.</p>\n<p>will run query:</p>\n<p><code>sql\nSELECT id, name FROM users;</code></p>\n<p>You can use parameter binding, and bind parameters:</p>\n<blockquote>\n<p>[!WARNING]\nYou don't need bind function for shorthand where clauses. You can use directly bind parameter as second parameter to where clauses.\nFor example: <code>-&gt;where('id', 5)</code> will bind parameters automatically. Don't use <code>bind</code> function for non-complex where operations.  </p>\n</blockquote>\n<p><code>php\n$user = db()-&gt;from('users')\n    -&gt;join('user_roles', 'user_roles.user_id', '=', 'users_id AND status = :status')\n    -&gt;bind('status', 2)\n    -&gt;first();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE id = 5;</code> </p>\n<p>You can bind parameters using question marks (?)</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id = ? OR id = ?', [5, 10])\n    -&gt;get();</code></p>\n<p>will run:</p>\n<p><code>sql\nSELECT * FROM users WHERE id = 5 OR id = 10</code></p>\n<blockquote>\n<p>[!DANGER]\nQuestion mark style binding, doesn't work with associative arrays.</p>\n</blockquote>\n<p><strong>Following code will generate error:</strong></p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id = ?', ['id' =&gt; 5])\n    -&gt;get();</code></p>\n<h5>whereIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereIn('id', [1,2,3])\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE id IN (1, 2, 3)</code></p>\n<h5>whereNotIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotIn('id', [1,2,3])\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE id NOT IN (1, 2, 3)</code></p>\n<h5>whereNull</h5>\n<p>By using <strong>whereNull</strong>, you can easily filter only null values:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE status IS NULL</code></p>\n<h5>whereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users WHERE status IS NOT NULL</code></p>\n<h5>Nested Clause</h5>\n<p>Nested SQL Queries can be generated using callback functions.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhere('status', 2)\n    -&gt;orWhere(function($query) {\n        return $query-&gt;where('votes', '&lt;', '500')\n            -&gt;orWhere('status', 3);\n    })\n    -&gt;orderBy('id DESC')\n    -&gt;get();</code></p>\n<p>As you can see below, queries inside of the function will be evaluated seperately inside of braces and it will run:</p>\n<p><code>sql\nSELECT * FROM users \n    WHERE id = 5 OR status = 2 \n        OR (votes &lt; 500 AND status = 3) \n    ORDER BY id DESC</code></p>\n<h5>Nested Clause with Multiple Depth</h5>\n<p>Nested SQL Queries can be generated using multiple callback functions.</p>\n<p>```php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;where(function($query) {\n        $query-&gt;where(function($innerQuery) {\n            return $innerQuery-&gt;where('test', 1)\n                -&gt;where('test_2', 2)\n            ;\n        });</p>\n<pre><code>    $query-&gt;orWhere(function($innerQuery) {\n        return $innerQuery-&gt;where('test', 3)\n            -&gt;where('test_2', 4)\n            ;\n    });\n\n    return $query;\n})\n</code></pre>\n<p>-&gt;get();\n```</p>\n<p>As you can see below, queries inside of the function will be evaluated seperately inside of braces and it will run:</p>\n<p><code>sql\nSELECT \n    * \nFROM users \nWHERE id = :param_1 \n    AND (\n        (test = 1 AND test = 2) \n            OR \n        (test = 3 AND test = 4)\n    )</code></p>\n<h5>orWhere</h5>\n<p>You can also use operators in where clauses. If you pass where clauses as an array, all clauses in the array will be joined using <code>AND</code> operator.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 3)\n    -&gt;orWhere([\n        ['votes', '&lt;', '500'],\n        ['status', 3]\n    ])\n    -&gt;get();</code></p>\n<p>will run:</p>\n<p><code>sql\nSELECT * FROM users WHERE id = 3 OR (votes &lt; 500 AND status = 3)</code></p>\n<h5>orWhereIn</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n-&gt;where('id', 5)\n-&gt;orWhereIn('status', [1,2,3])\n-&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>mysql\nSELECT * FROM users WHERE id = 5 OR status IN (1,2,3)</code></p>\n<h5>orWhereNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n-&gt;where('id', 5)\n-&gt;orWhereNull('status')\n-&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>mysql\nSELECT * FROM users WHERE id = 5 OR status IS NULL</code></p>\n<h5>orWhereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n-&gt;where('id', 5)\n-&gt;orWhereNotNull('status')\n-&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>mysql\nSELECT * FROM users WHERE id = 5 OR status IS NOT NULL</code></p>\n<h5>Distinct</h5>\n<p><code>php\n$users = db()\n   -&gt;from('users')-&gt;distinct(['name', 'phone'])\n    -&gt;get();</code></p>\n<p><code>php\n$users = db()\n   -&gt;from('users', ['name', 'phone'])-&gt;distinct()\n    -&gt;get();</code></p>\n<p>will run the queris:</p>\n<p><code>sql\nSELECT DISTINCT name,phone FROM users;</code> </p>\n<h5>Between</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('city', 34)\n    -&gt;whereBetween('status', 5, 10) \n    -&gt;get();</code>\nwill run:</p>\n<p><code>sql\nSELECT * FROM users WHERE city = 34 AND status BETWEEN 5 AND 10</code></p>\n<h5>Not Between</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('city', 34)\n    -&gt;whereNotBetween('status', 5, 10) \n    -&gt;get();</code>\nwill run:</p>\n<p><code>sql\nSELECT * FROM users WHERE city = 34 AND status NOT BETWEEN 5 AND 10</code></p>\n<h5>OR Between</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('city', 34)\n    -&gt;orWhereBetween('status', [5, 10])\n    -&gt;get();</code>\nwill run:</p>\n<p><code>sql\nSELECT * FROM users WHERE city = 34 OR status BETWEEN 5 AND 10</code></p>\n<h5>Not Between</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('city', 34)\n    -&gt;orWhereNotBetween('status', [5, 10])\n    -&gt;get();</code>\nwill run:</p>\n<p><code>sql\nSELECT * FROM users WHERE city = 34 OR status NOT BETWEEN 5 AND 10</code></p>\n<h4>Join</h4>\n<p>You can join tables:</p>\n<h5>Inner Join</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;join('user_permissions', 'users.id', '=', 'user_permissions.id')\n    -&gt;where('id', 1)\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users\n    INNER JOIN user_permissions ON users.id = user_permissions.id\nWHERE id = 1</code></p>\n<blockquote>\n<p>[!WARNING]\nJoin function uses INNER JOIN Statement</p>\n</blockquote>\n<h5>Left Join</h5>\n<p>You can left join tables:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;joinLeft('user_permissions', 'users.id', '=', 'user_permissions.id')\n    -&gt;where('id', 1)\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users\n    LEFT JOIN user_permissions ON users.id = user_permissions.id\nWHERE id = 1</code></p>\n<h5>Right Join</h5>\n<p>You can right join tables:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;joinRight('user_permissions', 'users.id', '=', 'user_permissions.id')\n    -&gt;where('id', 1)\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users\n    RIGHT JOIN user_permissions ON users.id = user_permissions.id\nWHERE id = 1</code></p>\n<h4>Use Index</h4>\n<p><code>php\n$users = db()\n   -&gt;from('users')-&gt;useIndex('name, phone')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users USE INDEX (name, phone);</code> </p>\n<h4>Force Index</h4>\n<p><code>php\n$users = db()\n   -&gt;from('users')-&gt;forceIndex('name, phone')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users FORCE INDEX (name, phone);</code> </p>\n<h4>Order By</h4>\n<p>You can order by column ascending or descending order:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderBy('id')\n    -&gt;get();</code></p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<h4>Group By</h4>\n<p>You can group by column:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;groupBy('id')\n    -&gt;get();</code></p>\n<p>For multiple columns, you can use comma seperator:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;groupBy('status,votes')\n    -&gt;get();</code></p>\n<h4>Having</h4>\n<p><code>php\ndb()-&gt;from('users', ['users.id'])\n    -&gt;groupBy('role_id')\n    -&gt;having('a &gt; 5')\n-&gt;get();</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nSELECT users.id FROM users GROUP BY role_id HAVING a &gt; 5</code></p>\n<h4>Skip (Offset)</h4>\n<p>You can add an offset to the result using <code>skip</code> function </p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;skip(5);</code></p>\n<p>will run the query:</p>\n<p><code>sql\nSELECT * FROM users OFFSET 5</code></p>\n<blockquote>\n<p>[!TIP]\nYou can use skip function with limit or pagination functions. It will basically skip <code>X</code> \nresults and limit or paginate after skipped records.</p>\n</blockquote>\n<h4>Limit</h4>\n<p>Results can be limited using limit function. Only the first number of rows will be returned.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;limit(10);</code></p>\n<p>Will run the query:</p>\n<p><code>sql\nSELECT * FROM users LIMIT 10</code></p>\n<p>And will return first 10 rows from <code>users</code> table.</p>\n<h4>Pagination</h4>\n<p>You can define paginate results by using <code>paginate</code> function.</p>\n<p>Parameter | Description | Default Value\n--------- | ----------- | ----------- \n<code>$limit</code> | Sets the limit per page | 20\n<code>$page_no</code> | Sets the current page  | 1</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;paginate(5, 2)\n    -&gt;get();</code></p>\n<p>Will run the following query:</p>\n<p><code>sql\nSELECT * FROM users LIMIT 5, 5</code></p>\n<p>And will return the results from 2nd page starting from <code>6.</code> to <code>10.</code> record. </p>\n<h4>Find</h4>\n<p>You can use <code>find</code> function to return one row using identifier</p>\n<p><code>php\n$user = db()\n    -&gt;from('users')\n    -&gt;find(1);</code></p>\n<p>will return one row with id = 1</p>\n<h4>Die</h4>\n<p>For debugging purposes, you can use <code>die</code> function to output the SQL Query that will run.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;die();</code></p>\n<p>will output the query that will be executed. </p>\n<blockquote>\n<p>[!NOTE]\n<code>die</code> function will not run the query, just outputs it and <strong>terminates the script</strong>.</p>\n</blockquote>\n<h4>Returning Functions</h4>\n<p>Returning functions are used to execute the query and return the processed result.</p>\n<p>Let's think of a virtual <code>users</code> table with the following records:</p>\n<p>id | name | status\n--- | --- | ---\n1 | John Doe | waiting\n2 | Jane Doe | waiting\n3 | Jack Hamel | active</p>\n<h5>get</h5>\n<p>Will return all rows as associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;get();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    [\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'  \n    ]\n];</code></p>\n<h5>first</h5>\n<p>Will just return the first row as associative array</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting'  \n];</code></p>\n<h5>count</h5>\n<p>Will return the number of rows for the query without any Group By statement.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;count();</code></p>\n<p>will return:</p>\n<p><code>(int) 3</code></p>\n<h5>one</h5>\n<p>Will return only one column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;one('name');</code></p>\n<p>will return the name column value of the first row.</p>\n<p><code>John Doe</code></p>\n<h5>column</h5>\n<p>Will return the values of specific column as an array list</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;column('name');</code></p>\n<p>will return names as an array list.</p>\n<p><code>php\n[\n    'John Doe',\n    'Jane Doe',\n    'Jack Hammel'\n];</code></p>\n<h5>keyToValue</h5>\n<p>Will return result indexed by key_column. Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    1 =&gt; [ // As you see, id column value is used as the key of the array.\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    2 =&gt; [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    3 =&gt; [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'  \n    ]\n];</code></p>\n<p>When you call keyToValue function with two parameters, it will use the column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be value of the specified column:</p>\n<p><code>php\n[\n    1 =&gt; 'John Doe',\n    2 =&gt; 'Jane Doe',\n    3 =&gt; 'Jack Hamel'\n];</code></p>\n<h5>keyToValues</h5>\n<p>when key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    'waiting' =&gt; [ // As you see, results are grouped by `status` column.\n        [ \n            'id' =&gt; 1,\n            'name' =&gt; 'John Doe',\n            'status' =&gt; 'waiting'  \n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'Jane Doe',\n            'status' =&gt; 'waiting'  \n        ]\n    ],\n    'active' =&gt; [\n        [\n            'id' =&gt; 3,\n            'name' =&gt; 'Jack Hamel',\n            'status' =&gt; 'active'  \n        ]\n    ]\n];</code></p>\n<p>When key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be value of the specified column</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be array of values of the specified column:</p>\n<p><code>php\n[\n    'waiting' =&gt; [\n        'John Doe',\n        'Jane Doe'\n    ],\n    'active' =&gt; [\n        'Jack Hamel'\n    ]\n];</code></p>\n<h5>max</h5>\n<p>Will return maximum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;max('id');</code></p>\n<p>will return:</p>\n<p><code>3</code></p>\n<h5>min</h5>\n<p>Will return minimum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;min('id');</code></p>\n<p>will return:</p>\n<p><code>1</code></p>\n<h5>average</h5>\n<p>Will return average value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;average('id');</code></p>\n<p>will return:</p>\n<p><code>2</code></p>\n<h5>sum</h5>\n<p>Will return sum of the specific column values as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;sum('amount');</code></p>\n<p>will return:</p>\n<p><code>2</code></p>\n<h5>transform</h5>\n<p>Transform function is used to transform the returning rows.</p>\n<blockquote>\n<p>[!DANGER]\nTransform function should be called before returning functions.</p>\n</blockquote>\n<p><code>php\ndb()-&gt;from('users')-&gt;transform(function($row) {\n    $row['id_with_name'] = $row['id'] . ' - ' . $row['name']; \n    return $row;\n})-&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting',\n    'id_with_name' =&gt; '1 John Doe'  \n];</code></p>\n<h3>Caching Results</h3>\n<p>To improve performance of your application, you may want to cache results to use it multiple times. On the other hand,\nyou may need the same result in the same code (For example: in a background job, you may have a where query in for loop)\nFor these cases, if you use registry, then you may get rid of <code>Cache Driver Connection</code> time.  </p>\n<h4>Cache</h4>\n<p>You can use cache function to cache results.</p>\n<h5>Without Parameters</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache()\n-&gt;get();</code></p>\n<p>will cache the result after first call for 60 seconds by default. </p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120)\n-&gt;get();</code></p>\n<p>will cache the result after first call for 120 seconds.</p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration and Cache Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120, 'test-cache-key')\n-&gt;get();</code></p>\n<p>will cache the result using <code>test-cache-key</code> in Cache of Default Cache Driver. Which means that, you can remove cache using following code:</p>\n<p><code>php\ncache()-&gt;delete('test-cache-key');</code></p>\n<h5>With Duration, Cache Key and Cache Driver</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120, 'test-cache-key', 'apc')\n-&gt;get();</code></p>\n<p>will cache the result using <code>test-cache-key</code> in Cache of <code>apc</code> Driver. Which means that, you can remove cache using following code:</p>\n<p><code>php\ncache('apc')-&gt;delete('test-cache-key');</code></p>\n<h4>Registry</h4>\n<p>You can use registry to cache results for the running code.</p>\n<h5>Without Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry()\n-&gt;get();</code></p>\n<p>will save the result to application registry and returned  </p>\n<h5>With Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry('test-key')\n-&gt;get();</code></p>\n<p>will save the result to application registry using <code>test-key</code> as key. Which means that, you can access and manipulate result \nusing following code block:</p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::get('test-key');</code></p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::set('test-key', [\n    'changed-data'\n]);</code></p>\n<blockquote>\n<p>[!TIP]\nAlthough you may use registry keys while saving results to registry, there is no known use case for this feature :)</p>\n</blockquote>\n<h3>INSERT Queries</h3>\n<p>You can run insert queries using database client.</p>\n<blockquote>\n<p>[!TIP]\nYou can call <code>runInBackground</code> function before sending insert queries to make queries asynchronous on Elastic Search.\nIf you want your code to wait until all queued insert tasks finish, you can use <code>db('elastic-search')-&gt;from(''')-&gt;refresh()</code>\nto make the code wait.</p>\n</blockquote>\n<h4>Insert</h4>\n<p>Single insert statement can be run as the following example: </p>\n<p><code>php\n$userId = db()-&gt;table('users')-&gt;insert([\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will return the auto increment id of the created row.</p>\n<h4>InsertOrUpdate</h4>\n<p>Inserts or updates single record. First parameter is used to find if the row already exist,\n- There are two options:\n    * If the record doesn't exist:\\\n    Both parameters will be merged and inserted into database.</p>\n<pre><code>* If the record exists:\\\nSince first parameters doesn't change, it will update the record with the values in $data array (Second Parameter)\n</code></pre>\n<p>Function returns auto increment value for the record for both cases.</p>\n<blockquote>\n<p>Note: This function doesn't use unique indexes. It's recommended to use indexed columns for better performance.</p>\n</blockquote>\n<p>```php\n$attribute = [\n    'id' =&gt; 1\n];</p>\n<p>$data = [\n    'name' =&gt; 'foo'\n];</p>\n<p>db()-&gt;table('users')\n    -&gt;insertOrUpdate($attribute, $data);\n```\nIt will check if there is a record having id =&gt; 1,\\\nif it doesnt exist, then this will become an insert statement.\\\nIf it exist, then, the call become an update statement.</p>\n<h4>InsertOrIgnore</h4>\n<p>When inserting a record to database, if there is a unique index, you may get an error. When this function is used, it ignores insert errors and returns without inserting the record on error. Which means that, the record will not be inserted if it already exist.</p>\n<p><code>php\ndb()-&gt;table('users')-&gt;insertOrIgnore([\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will not insert record if there is already a record with id = 1</p>\n<h4>BulkInsert</h4>\n<p>Bulk inserts can improve performance since multiple records will be inserted in a single query.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsert([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h4>BulkInsertOrUpdate</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to update the existing data.\nThere are two options:</p>\n<ul>\n<li>Updating all columns: Following query will update all columns if the records already exist.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n     -&gt;bulkInsertOrUpdate([\n         [\n             'id' =&gt; 1,\n             'name' =&gt; 'foo',\n             'surname' =&gt; 'bar'\n         ],\n         [\n             'id' =&gt; 2,\n             'name' =&gt; 'John',\n             'surname' =&gt; 'Doe'\n         ]\n     ])\n ;</code></p>\n<ul>\n<li>Updating specific columns: Following query will only update the name column if the unique key already exist for the records.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrUpdate([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ], [\n        'name'\n    ])\n;</code></p>\n<h4>BulkInsertOrIgnore</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to ignore the new data without any error.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrIgnore([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h3>UPDATE Queries</h3>\n<p>You can run update queries using database client.</p>\n<h4>Update</h4>\n<p>Simple update statement can be run as the following example:</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<h4>Limit</h4>\n<p>You can limit the number of rows the update query can update by using limit function.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;limit(1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<p>will run the query:</p>\n<p><code>sql\nUPDATE users SET name = 'foo', surname = 'bar' WHERE id = 1 LIMIT 1;</code></p>\n<h4>Where Clause</h4>\n<blockquote>\n<p><strong>Note:</strong> You can use all type of where clauses with update queries. Please check <a href=\"#where\">WHERE</a> section for this.</p>\n</blockquote>\n<h4>Join Statement</h4>\n<blockquote>\n<p><strong>Note:</strong> You can use all type of join clauses with update queries. Please check <a href=\"#join\">JOIN</a> section for this.</p>\n</blockquote>\n<p>Example Usage:</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;join('user_groups', 'user_groups.id', '=', 'users.user_group_id')\n    -&gt;where('users.id', 1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'user_groups.name' =&gt; 'bar'\n    ])\n;</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nUPDATE `users` INNER JOIN user_groups ON user_groups.id = users.user_group_id SET `name` = 'foo',`user_groups`.`name` = 'bar' WHERE users.id = 1</code></p>\n<h3>DELETE Queries</h3>\n<p>You can run delete queries using database client.</p>\n<h4>Delete</h4>\n<p>Simple delete statement can be run as the following example:</p>\n<p><code>php\n$affected = db()-&gt;table('users')\n    -&gt;where('id', 5)\n    -&gt;delete()\n;</code></p>\n<p>will run the following query and will return <code>number of rows affected</code></p>\n<p><code>sql\nDELETE FROM users WHERE id = 5</code></p>\n<h4>Join Statement</h4>\n<p>Multiple tables may be joined and deleted.</p>\n<p><code>php\ndb()-&gt;table('user_groups')\n    -&gt;join('users', 'user_groups.id', '=', 'users.user_group_id')\n    -&gt;whereNull('users.id')\n    -&gt;delete(['users'])\n;</code></p>\n<p>Will run the following query:</p>\n<p><code>sql\nDELETE users FROM user_groups INNER JOIN users ON user_groups.id = users.user_group_id WHERE users.id IS NULL</code></p>\n<blockquote>\n<p><strong>Note:</strong> Delete function accepts array of table names, if tables names are not given, then it will only delete the main table which is defined when table function is called. Which is <code>user_groups</code> table in the example.</p>\n</blockquote>\n<p>When using join statements, if no delete tables is defined when delete function is called, only main table will be deleted.</p>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;table('user_groups')\n    -&gt;join('users', 'user_groups.id', '=', 'users.user_group_id')\n    -&gt;whereNull('users.id')\n    -&gt;delete() // No table name is defined, user_groups table will be deleted. \n;</code></p>\n<p>Will run the following query:</p>\n<p><code>sql\nDELETE user_groups FROM user_groups INNER JOIN users ON user_groups.id = users.user_group_id WHERE users.id IS NULL</code></p>\n<h3>Schema</h3>\n<p>You can run schema operations with <code>Butterfly\\Database</code></p>\n<h4>tables</h4>\n<p>Will return the list of tables in the databases.</p>\n<p><code>php\ndb()-&gt;schema()-&gt;tables();</code></p>\n<p>will return the list of tables as an array list.</p>\n<p><code>php\n[\n    'cms_admin_users', \n    'videos',\n    'articles'\n];</code></p>\n<h4>columns</h4>\n<p>Will return the list of columns in a table.</p>\n<p><code>php\ndb()-&gt;schema('users')-&gt;columns();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    [\n        'column_name' =&gt; 'id',\n        'data_type' =&gt; 'int',\n        'is_primary_key' =&gt; true,\n        'is_nullable' =&gt; false\n    ],\n    [\n        'column_name' =&gt; 'name',\n        'data_type' =&gt; 'varchar',\n        'is_primary_key' =&gt; false,\n        'is_nullable' =&gt; false\n    ]\n];</code></p>\n<h4>createTable</h4>\n<p>will create a table with the specified columns.</p>\n<p><code>php\ndb()-&gt;createTable('test', [\n  [\n      'column_name' =&gt; 'id',\n      'identifier' =&gt; true,\n      'column_type' =&gt; 'int(11)'\n  ],\n  [\n      'column_name' =&gt; 'name',\n      'column_type' =&gt; 'varchar(255)'\n  ]\n]);</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nCREATE TABLE `test` (`id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL, PRIMARY KEY (`id`)) ENGINE = `InnoDB`</code></p>\n<h4>createOrUpdateTable</h4>\n<p>it checks for the table, if the table already exists, it will alter.</p>\n<blockquote>\n<p>[!TIP]\nThis function also checks for columns, if column information is the same, then, it will skip it, if column is not identical, it will modify the column.</p>\n<p>[!WARNING]\nThis function doesn't check auto_increment column for altering operations. Which means that, you may not change auto_increment column for existing tables.</p>\n</blockquote>\n<p><code>php\ndb()-&gt;schema()-&gt;createOrUpdateTable('test', [\n  [\n      'column_name' =&gt; 'id',\n      'identifier' =&gt; true,\n      'column_type' =&gt; 'int(11)'\n  ],\n  [\n      'column_name' =&gt; 'name',\n      'column_type' =&gt; 'varchar(255)',\n      'column_default' =&gt; 'John Doe'\n  ]\n]);</code></p>\n<p>will run the following query if table doesn't exist:</p>\n<p><code>sql\nCREATE TABLE `test` (`id` int(11) NOT NULL AUTO_INCREMENT,`name` varchar(255) NOT NULL DEFAULT 'John Doe', PRIMARY KEY (`id`)) ENGINE = `InnoDB`</code></p>\n<p>will run the following query if table exists, id column exists but different then current info, name column is missing.</p>\n<p><code>sql\nALTER TABLE `test` MODIFY `id` int(11) NOT NULL,ADD `name` varchar(255) NOT NULL DEFAULT 'John Doe'</code></p>\n<p>will run the following query if table exists, id column exists and identical, name column is missing.</p>\n<p><code>sql\nALTER TABLE `test` ADD `name` varchar(255) NOT NULL DEFAULT 'John Doe'</code></p>\n<h4>createColumns</h4>\n<p><code>php\ndb()-&gt;schema()-&gt;createColumns('test', [\n    [\n        'column_name' =&gt; 'name',\n        'column_type' =&gt; 'varchar(255)',\n        'column_default' =&gt; 'John Doe',\n        'after' =&gt; 'id'\n    ]\n]);</code></p>\n<p>will run the query</p>\n<p><code>sql\nALTER TABLE `test` ADD `name` varchar(255) NOT NULL DEFAULT 'John Doe' AFTER id</code></p>\n<h4>dropColumns</h4>\n<p>Drop column drops the column from table. If column doesn't exist, then it will just return true</p>\n<p><code>php\ndb()-&gt;schema('test')-&gt;dropColumns(['test_column', 'test_column_2']);</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nALTER TABLE `test` DROP `test_column`,DROP `test_column_2`</code></p>\n<h4>rename</h4>\n<p>You can rename tables using <code>rename</code> function.</p>\n<p>Following example renames table <code>test</code> to <code>test_2</code>:</p>\n<p><code>php\ndb()\n    -&gt;schema('test')-&gt;rename('test_2')\n;</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nRENAME TABLE `test` tO `test_2`;</code></p>\n<h4>dropTable</h4>\n<p>Drop table removes the table from database. If table doesn't exist, then it will just return true</p>\n<p><code>php\ndb()-&gt;schema('test')-&gt;dropTable();</code> </p>\n<p>will run the following query:</p>\n<p><code>sql\nDROP TABLE `test`;</code></p>\n<blockquote>\n<p>[!TIP]\nDrop table function checks if table exists before running the query</p>\n</blockquote>\n<p>Alternatively, you can also call function with table name as first parameter.</p>\n<p><code>php\ndb()-&gt;schema()-&gt;dropTable('test');</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nDROP TABLE `test`;</code></p>\n<blockquote>\n<p>[!TIP]\nAs you may guess, if you define parameter to the function, it will be used instead of tableName property of the class.# ElasticSearch</p>\n</blockquote>\n"
        },
        {
            "header": "Elastic Search",
            "content": "\n"
        },
        {
            "header": "Introduction",
            "content": "\n<p>Audience is getting more and more everyday, data you should keeps growing. User's are getting more demanding. </p>\n<p>That brought need for different database solutions optimized for your needs. Elastic Search is one of them when you need faster search results, facets etc.</p>\n<p>Butterfly Elastic Search implemenation aims to make developer comfortable while writing queries and maintaining code for different database technologies.</p>\n<p>You can write down queries easier than ever using Butterfly. Just change your adapter and that's it. You can use built-in functions to handle most complex operations like Bulk Inserts,\nInsert Or Ignore operations, Insert Or Update operations, Fetching or updating specific columns.</p>\n"
        },
        {
            "header": "Configuration",
            "content": "\n<p>The database configurations are stored in <code>app/config/database.php</code>. Configurations can be customized by domain name with subfolders.\nExample configuration:</p>\n<p>```php\n&lt;?php</p>\n<p>return [\n    'elastic-search' =&gt; [\n        'server' =&gt; 'http://localhost',\n        'adapter' =&gt; 'ElasticSearch',\n        'name' =&gt; 'database_prefix', // Used as prefix for different indexes. \n        'user' =&gt; 'ElasticSearch_USERNAME', // Remove this parameter if you don't have username\n        'password' =&gt; 'ElasticSearch_PASSWORD', // Remove this parameter if you don't have username\n        'port' =&gt; 9200 // Optional\n    ]\n];\n```</p>\n<h3>Using The Database Client</h3>\n<p>Database client can be reached using <code>db()</code> helper. You can also reach defined databases using the database alias as the first parameter.</p>\n<p><code>php\ndb('elastic-search');</code></p>\n<p>You can define multiple databases for different purposes. For example, you may create a logging ElasticSearch Instance / Database.</p>\n"
        },
        {
            "header": "Transactions",
            "content": "\n<p>Transactions are not supported for ElasticSearch.</p>\n"
        },
        {
            "header": "Running Queries",
            "content": "\n<h3>search Function</h3>\n<p>Since Elastic Search's main focus is searching, you can use <code>search</code> function to make a generic search:</p>\n<p>Example:</p>\n<p><code>php\n$users = db()\n    -&gt;from('users')\n    -&gt;search('test', ['name', 'surname', 'email'])\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\":{\n      \"query_string\": {,\n            \"query\":\"test\",\n            \"fields\": [\"name\", \"surname\",\"email\"]\n      }\n}</code></p>\n<p>and search for <code>test</code> in <code>name</code>, <code>surname</code>, <code>email</code> fields.</p>\n<h3>SELECT Queries</h3>\n<p><code>php\n$users = db()\n   -&gt;from('users')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\"query\":{\"match_all\":{}}}</code> </p>\n<p>and return all results as associative array.</p>\n<h4>Specifying Columns</h4>\n<p>You may want to return specific columns:</p>\n<p><code>php\n$users = db()\n    -&gt;from('users', ['id', 'name'])\n    -&gt;get();</code></p>\n<p>will run query:</p>\n<p><code>json\n{\"query\": {\"match_all\": {}}, \"_source\":[\"id\",\"name\"]}</code></p>\n<h4>Where</h4>\n<p>You can write where clauses in many ways. Examples are the following:</p>\n<p><code>php\n$user = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;first();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\"query\":{\"query_string\":{\"query\":\"(id:5)\"}}}</code> </p>\n<p>and return one row as associative array.</p>\n<blockquote>\n<p>[!WARNING]\nUnlike MySQL Where Clauses, Elastic Search doesn't match only exact phrase when you search inside Text fields. For example: if you run <code>-&gt;where('name', 'John')</code> it will return rows where name is John or John Doe.\nIf you want to return exact records with name: John, you should use <code>keyword</code> field type, instead of <code>text</code>.</p>\n</blockquote>\n<h5>whereIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereIn('id', [1,2,3])\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotIn('id', [1,2,3])\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"NOT id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNull</h5>\n<p>By using <strong>whereNull</strong>, you can easily filter only null values:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"NOT _exists_:status\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"_exists_:status\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>Nested Clause</h5>\n<p>Nested SQL Queries can be generated using callback functions.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhere('status', 2)\n    -&gt;orWhere(function($query) {\n        return $query-&gt;where('votes', '&lt;', '500')\n            -&gt;orWhere('status', 3);\n    })\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<p>As you can see below, queries inside of the function will be evaluated seperately inside of braces and it will run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (status:2) OR ((votes&lt;500) AND (status:3))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhere</h5>\n<p>You can also use operators in where clauses. If you pass where clauses as an array, all clauses in the array will be joined using <code>AND</code> operator.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 3)\n    -&gt;orWhere([\n        ['votes', '&lt;', '500'],\n        ['status', 3]\n    ])\n    -&gt;get();</code></p>\n<p>will run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:3) OR ((votes&lt;500) AND (status:3))\"\n    }\n  }\n}</code></p>\n<h5>orWhereIn</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 2)\n    -&gt;orWhereIn('id', [5, 10])\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:2) OR id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhereNull('status')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (NOT _exists_:status)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhereNotNull('status')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (_exists_:status)\"\n    }\n  }\n}</code></p>\n<h5>Distinct</h5>\n<p>Distinct query is not supported by Elastic Search Adapter.</p>\n<h5>whereBetween</h5>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;whereBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) AND (id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>boostWhere</h5>\n<p>```php\ndb()-&gt;from('users')\n    -&gt;boostWhere(5, function($query) {\n        $query-&gt;where('id', 5);\n        $query-&gt;orWhere('type', 'test');</p>\n<pre><code>    return $query;\n})\n-&gt;orWhere('status', 2)\n-&gt;get()\n</code></pre>\n<p>;\n```</p>\n<p>will run:</p>\n<p>```json\n{\n 'query': {\n    'query_string': {\n        'query':'((id:5) OR (type:\"test\"))^5 OR (status:2)',\n        'default_operator':'and'\n    }\n}</p>\n<p>```</p>\n<h5>orBoostWhere</h5>\n<p>```php\ndb()-&gt;from('users')\n    -&gt;where('status', 2)\n    -&gt;orBoostWhere(5, function($query) {\n        $query-&gt;where('id', 5);\n        $query-&gt;orWhere('type', 'test');</p>\n<pre><code>    return $query;\n})\n-&gt;get()\n</code></pre>\n<p>;\n```</p>\n<p>will run:</p>\n<p><code>json\n{\n 'query': {\n    'query_string': {\n        'query':'(status:2) OR ((id:5) OR (type:\"test\"))^5',\n        'default_operator':'and'\n    }\n}</code></p>\n<h5>orWhereBetween</h5>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;orWhereBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) OR (id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNotBetween</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;orWhereNotBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get();</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) OR (NOT id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotBetween</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;whereNotBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get();</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) AND (NOT id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h4><code>Join</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h5><code>Left Join</code></h5>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h5><code>Right Join</code></h5>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h4><code>Use Index</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>useIndex</code> is supported by Elastic Search. Will not produce an error but it will just ignore this function call. </p>\n</blockquote>\n<h4><code>Force Index</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>forceIndex</code> is supported by Elastic Search. Will not produce an error but it will just ignore this function call.</p>\n</blockquote>\n<h4>Order By</h4>\n<p>You can order by column ascending or descending order:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderBy('id')\n    -&gt;get();</code></p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<h4>Group By</h4>\n<p>You can use group by function to get aggregations in Elastic Search Implementation</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;groupBy('status')\n;\n$result = $users-&gt;get();\n$aggregations = $users-&gt;aggregations();</code></p>\n<p>will return</p>\n<p><code>php\nreturn [\n    'status' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]       \n    ]    \n];</code></p>\n<p>For multiple columns, you can use array:</p>\n<p>```php\n$users = db()-&gt;from('users')\n    -&gt;groupBy(['status','votes'])\n;</p>\n<p>$result = $users-&gt;get();\n$aggregations = $users-&gt;aggregations();\n```</p>\n<p>will return</p>\n<p><code>php\nreturn [\n    'status' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]       \n    ],\n    'votes' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]       \n    ]    \n];</code></p>\n<h4>Group By With Filters</h4>\n<p>You can use group by with filters function to get filtered aggregations</p>\n<p><code>php\n$select-&gt;from('users', ['id'])\n    -&gt;where('id', 5)\n    -&gt;groupByWithFilters([\n        'type', \n        'type_2',\n        'type_3'\n    ],[\n        'type' =&gt; 1,\n        'type_2' =&gt; 2\n    ])-&gt;get();</code></p>\n<h4>Group By And Size Limit</h4>\n<p>By default, there is a limit for each group by field in the Elasticsearch settings as 10. It is possible to change this limit as you can see in the following array example.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;groupBy([\n        [\n            'field' =&gt; 'badge',\n            'limit' =&gt; 30 // overrides default size\n        ],\n        'votes' // uses default size (10)\n    ])\n;</code></p>\n<p>It can be used in the same way when you group by filter.</p>\n<p><code>php\n$select-&gt;from('users', ['id'])\n    -&gt;where('id', 5)\n    -&gt;groupByWithFilters([\n        'type',  // uses default size (10)\n        'type_2', // uses default size (10)\n        [\n            'field' =&gt; 'type_3',\n            'size' =&gt; 20 // overrides default size\n        ]\n    ],[\n        'type' =&gt; 1,\n        'type_2' =&gt; 2\n    ])-&gt;get();</code></p>\n<h4>Group By Range</h4>\n<p>You can define ranges to get aggregations using Elastic Search Range Spec.</p>\n<p>Example:</p>\n<p>```php\n$select-&gt;from('users', ['id'])-&gt;groupByRange('price', [\n    0 =&gt; 100,\n    100 =&gt; 200,\n    200 =&gt; 0\n])-&gt;get();</p>\n<p>$aggregations = $select-&gt;aggregations();\n```</p>\n<p>will return:\n<code>php\n[\n    'price_range' =&gt; [\n        'buckets' =&gt; [\n            \"*-100.0\" =&gt; [\n                'to' =&gt; 100,\n                'doc_count' =&gt; 2\n            ],\n            \"100.0-200.0\" =&gt; [\n                'from' =&gt; 100,\n                'to' =&gt; 200,\n                'doc_count' =&gt; 2\n            ],\n            \"200.0-*\" =&gt; [\n                'from' =&gt; 200,\n                'doc_count' =&gt; 2\n            ]\n    ]\n]</code></p>\n<h4>Having</h4>\n<blockquote>\n<p>[!WARNING]\nHaving is not supported by Elastic Search. It will throw error: \"Having function is not supported by ElasticSearch\"</p>\n</blockquote>\n<h4>Limit</h4>\n<p>Results can be limited using limit function. Only the first number of rows will be returned.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;limit(10);</code></p>\n<p>Will run the query:</p>\n<p><code>json\n{\n  \"size\": 10\n}</code></p>\n<p>And will return first 10 rows from <code>users</code> index.</p>\n<h4>Pagination</h4>\n<blockquote>\n<p>[!WARNING]\nPagination doesnt work correctly in Elastic Search if no sorting is set. Please use orderBy functions before calling pagination</p>\n</blockquote>\n<p>You can define paginate results by using <code>paginate</code> function.</p>\n<p>Parameter | Description | Default Value\n--------- | ----------- | ----------- \n<code>$limit</code> | Sets the limit per page | 20\n<code>$page_no</code> | Sets the current page  | 1</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;paginate(5, 2)\n    -&gt;get();</code></p>\n<p>Will run the following query:</p>\n<p><code>json\n{\n  \"size\": 5,\n  \"from\": 5\n}</code></p>\n<p>And will return the results from 2nd page starting from <code>6.</code> to <code>10.</code> record.  </p>\n<h4>Find</h4>\n<p>You can use <code>find</code> function to return one row using identifier</p>\n<p><code>php\n$user = db()\n    -&gt;from('users')\n    -&gt;find(1);</code></p>\n<p>will return one row with id = 1</p>\n<h4>Die</h4>\n<p>For debugging purposes, you can use <code>die</code> function to output the SQL Query that will run.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;die();</code></p>\n<p>will output the query that will be executed. </p>\n<blockquote>\n<p>[!NOTE]\n<code>die</code> function will not run the query, just outputs it and <strong>terminates the script</strong>.</p>\n</blockquote>\n<h4>Returning Functions</h4>\n<p>Returning functions are used to execute the query and return the processed result.</p>\n<p>Let's think of a virtual <code>users</code> table with the following records:</p>\n<p>id | name | status\n--- | --- | ---\n1 | John Doe | waiting\n2 | Jane Doe | waiting\n3 | Jack Hamel | active</p>\n<h5>get</h5>\n<p>Will return all rows as associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;get();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    [\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'  \n    ]\n];</code></p>\n<h5>first</h5>\n<p>Will just return the first row as associative array</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting'  \n];</code></p>\n<h5>count</h5>\n<p>Will return the number of rows for the query without any Group By statement.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;count();</code></p>\n<p>will return:</p>\n<p><code>(int) 3</code></p>\n<h5>one</h5>\n<p>Will return only one column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;one('name');</code></p>\n<p>will return the name column value of the first row.</p>\n<p><code>John Doe</code></p>\n<h5>column</h5>\n<p>Will return the values of specific column as an array list</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;column('name');</code></p>\n<p>will return names as an array list.</p>\n<p><code>php\n[\n    'John Doe',\n    'Jane Doe',\n    'Jack Hammel'\n];</code></p>\n<h5>keyToValue</h5>\n<p>Will return result indexed by key_column. Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    1 =&gt; [ // As you see, id column value is used as the key of the array.\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    2 =&gt; [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'  \n    ],\n    3 =&gt; [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'  \n    ]\n];</code></p>\n<p>When you call keyToValue function with two parameters, it will use the column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be value of the specified column:</p>\n<p><code>php\n[\n    1 =&gt; 'John Doe',\n    2 =&gt; 'Jane Doe',\n    3 =&gt; 'Jack Hamel'\n];</code></p>\n<h5>keyToValues</h5>\n<p>when key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    'waiting' =&gt; [ // As you see, results are grouped by `status` column.\n        [ \n            'id' =&gt; 1,\n            'name' =&gt; 'John Doe',\n            'status' =&gt; 'waiting'  \n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'Jane Doe',\n            'status' =&gt; 'waiting'  \n        ]\n    ],\n    'active' =&gt; [\n        [\n            'id' =&gt; 3,\n            'name' =&gt; 'Jack Hamel',\n            'status' =&gt; 'active'  \n        ]\n    ]\n];</code></p>\n<p>When key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be value of the specified column</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be array of values of the specified column:</p>\n<p><code>php\n[\n    'waiting' =&gt; [\n        'John Doe',\n        'Jane Doe'\n    ],\n    'active' =&gt; [\n        'Jack Hamel'\n    ]\n];</code></p>\n<h5>max</h5>\n<p>Will return maximum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;max('id');</code></p>\n<p>will return:</p>\n<p><code>3</code></p>\n<h5>min</h5>\n<p>Will return minimum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;min('id');</code></p>\n<p>will return:</p>\n<p><code>1</code></p>\n<h5>average</h5>\n<p>Will return average value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;average('id');</code></p>\n<p>will return:</p>\n<p><code>2</code></p>\n<h5>transform</h5>\n<p>Transform function is used to transform the returning rows.</p>\n<blockquote>\n<p>[!DANGER]\nTransform function should be called before returning functions.</p>\n</blockquote>\n<p><code>php\ndb()-&gt;from('users')-&gt;transform(function($row) {\n    $row['id_with_name'] = $row['id'] . ' - ' . $row['name']; \n    return $row;\n})-&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting',\n    'id_with_name' =&gt; '1 John Doe'  \n];</code></p>\n<h3>Caching Results</h3>\n<p>To improve performance of your application, you may want to cache results to use it multiple times. On the other hand,\nyou may need the same result in the same code (For example: in a background job, you may have a where query in for loop)\nFor these cases, if you use registry, then you may get rid of <code>Cache Driver Connection</code> time.  </p>\n<h4>Cache</h4>\n<p>You can use cache function to cache results.</p>\n<h5>Without Parameters</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache()\n-&gt;get();</code></p>\n<p>will cache the result after first call for 60 seconds by default. </p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120)\n-&gt;get();</code></p>\n<p>will cache the result after first call for 120 seconds.</p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration and Cache Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120, 'test-cache-key')\n-&gt;get();</code></p>\n<p>will cache the result using <code>test-cache-key</code> in Cache. Which means that, you can remove cache using following code:</p>\n<p><code>php\ncache()-&gt;delete('test-cache-key');</code></p>\n<h4>Registry</h4>\n<p>You can use registry to cache results for the running code.</p>\n<h5>Without Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry()\n-&gt;get();</code></p>\n<p>will save the result to application registry and returned  </p>\n<h5>With Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry('test-key')\n-&gt;get();</code></p>\n<p>will save the result to application registry using <code>test-key</code> as key. Which means that, you can access and manipulate result \nusing following code block:</p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::get('test-key');</code></p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::set('test-key', [\n    'changed-data'\n]);</code></p>\n<blockquote>\n<p>[!TIP]\nAlthough you may use registry keys while saving results to registry, there is no known use case for this feature :)</p>\n</blockquote>\n<h3>INSERT Queries</h3>\n<p>You can run insert queries using database client.</p>\n<h4>Insert</h4>\n<p>Single insert statement can be run as the following example: </p>\n<p><code>php\n$userId = db()-&gt;table('users')-&gt;insert([\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will return the auto increment id of the created row.</p>\n<h4>InsertOrUpdate</h4>\n<p>Inserts or updates single record. First parameter is used to find if the row already exist,\n- There are two options:\n    * If the record doesn't exist:\\\n    Both parameters will be merged and inserted into database.</p>\n<pre><code>* If the record exists:\\\nSince first parameters doesn't change, it will update the record with the values in $data array (Second Parameter)\n</code></pre>\n<p>Function returns auto increment value for the record for both cases.</p>\n<blockquote>\n<p>Note: This function doesn't use unique indexes. It's recommended to use indexed columns for better performance.</p>\n</blockquote>\n<p>```php\n$attribute = [\n    'id' =&gt; 1\n];</p>\n<p>$data = [\n    'name' =&gt; 'foo'\n];</p>\n<p>db()-&gt;table('users')\n    -&gt;insertOrUpdate($attribute, $data);\n```\nIt will check if there is a record having id =&gt; 1,\\\nif it doesnt exist, then this will become an insert statement.\\\nIf it exist, then, the call become an update statement.</p>\n<h4>InsertOrIgnore</h4>\n<p>When inserting a record to database, if there is a unique index, you may get an error. When this function is used, it ignores insert errors and returns without inserting the record on error. Which means that, the record will not be inserted if it already exist.</p>\n<p><code>php\ndb()-&gt;table('users')-&gt;insertOrIgnore([\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will not insert record if there is already a record with id = 1</p>\n<h4>BulkInsert</h4>\n<p>Bulk inserts can improve performance since multiple records will be inserted in a single query.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsert([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h4>BulkInsertOrUpdate</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to update the existing data.\nThere are two options:</p>\n<ul>\n<li>Updating all columns: Following query will update all columns if the records already exist.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n     -&gt;bulkInsertOrUpdate([\n         [\n             'id' =&gt; 1,\n             'name' =&gt; 'foo',\n             'surname' =&gt; 'bar'\n         ],\n         [\n             'id' =&gt; 2,\n             'name' =&gt; 'John',\n             'surname' =&gt; 'Doe'\n         ]\n     ])\n ;</code></p>\n<ul>\n<li>Updating specific columns: Following query will only update the name column if the unique key already exist for the records.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrUpdate([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ], [\n        'name'\n    ])\n;</code></p>\n<h4>BulkInsertOrIgnore</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to ignore the new data without any error.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrIgnore([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h3>UPDATE Queries</h3>\n<p>You can run update queries using database client.</p>\n<h4>Update</h4>\n<p>Simple update statement can be run as the following example:</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<h4>Limit</h4>\n<p>You can limit the number of rows the update query can update by using limit function.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;limit(1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<p>will update column where <code>id = 1</code></p>\n<h4>Raw Values</h4>\n<p>You can use values that are dynamic like column to column assignment, or mysql functions </p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;limit(1)\n    -&gt;update([\n        'order_no' =&gt; db()-&gt;raw('`order_no` + 1')\n    ])\n;</code></p>\n<p>will run the following SQL Query</p>\n<p><code>sql\nUPDATE `users` SET `order_no` = `order_no` + 1 WHERE id = 1 LIMIT 1</code></p>\n<h4>Where Clause</h4>\n<blockquote>\n<p><strong>Note:</strong> You can use all type of where clauses with update queries. Please check <a href=\"#where-1\">WHERE</a> section for this.</p>\n</blockquote>\n<h3>DELETE Queries</h3>\n<p>You can run delete queries using database client.</p>\n<h4>Delete</h4>\n<p>Simple delete statement can be run as the following example:</p>\n<p><code>php\n$affected = db()-&gt;table('users')\n    -&gt;where('id', 5)\n    -&gt;delete()\n;</code></p>\n<p>will delete column where <code>id = 5</code> and will return <code>number of rows affected</code>\n```</p>\n<h4>Join Statement</h4>\n<p>Elastic Search doesn't support join statements.</p>\n<h3>Schema</h3>\n<p>You can run schema operations using <code>Butterfly\\Database</code></p>\n<h4>tables</h4>\n<p>Will return the list of tables in the databases.</p>\n<p><code>php\ndb()-&gt;schema()-&gt;tables();</code></p>\n<p>will return the list of tables as an array list.</p>\n<p><code>php\n[\n    'cms_admin_users', \n    'videos',\n    'articles'\n];</code></p>\n<h4>columns</h4>\n<p>Will return the list of columns in a table.</p>\n<p><code>php\ndb()-&gt;schema('users')-&gt;columns();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    [\n        'column_name' =&gt; 'id',\n        'data_type' =&gt; 'int',\n        'is_primary_key' =&gt; true,\n        'is_nullable' =&gt; false\n    ],\n    [\n        'column_name' =&gt; 'name',\n        'data_type' =&gt; 'varchar',\n        'is_primary_key' =&gt; false,\n        'is_nullable' =&gt; false\n    ]\n];</code></p>\n<h4>createTable</h4>\n<p>will create a table with the specified columns.</p>\n<p><code>php\ndb()-&gt;createTable('test', [\n  [\n      'column_name' =&gt; 'id',\n      'identifier' =&gt; true,\n      'column_type' =&gt; 'int(11)'\n  ],\n  [\n      'column_name' =&gt; 'name',\n      'column_type' =&gt; 'varchar(255)'\n  ]\n]);</code></p>\n<blockquote>\n<p>[!WARNING]\nWork in progress</p>\n</blockquote>\n<h4>createOrUpdateTable</h4>\n<p>it checks for the table, if the table already exists, it will alter.</p>\n<blockquote>\n<p>[!TIP]\nThis function also checks for columns, if column information is the same, then, it will skip it, if column is not identical, it will modify the column.</p>\n<p>[!WARNING]\nThis function doesn't check auto_increment column for altering operations. Which means that, you may not change auto_increment column for existing tables.</p>\n</blockquote>\n<p><code>php\ndb()-&gt;schema()-&gt;createOrUpdateTable('test', [\n  [\n      'column_name' =&gt; 'id',\n      'identifier' =&gt; true,\n      'column_type' =&gt; 'int(11)'\n  ],\n  [\n      'column_name' =&gt; 'name',\n      'column_type' =&gt; 'varchar(255)',\n      'column_default' =&gt; 'John Doe'\n  ]\n]);</code></p>\n<blockquote>\n<p>[!wARNING]\nColumn alteration checks field types not to update larger column types to smaller ones.\nbigint will not be converted to integer, longtext will not be converted to mediumtext or text.\nit first checks column type and column size.</p>\n<p>If you need to decrease column size, you should do it manually</p>\n</blockquote>\n<h4>dropColumns</h4>\n<p>Drop column drops the column from table. If column doesn't exist, then it will just return true</p>\n<blockquote>\n<p>[!WARNING]\nWork in progress</p>\n</blockquote>\n"
        },
        {
            "header": "MongoDB",
            "content": "\n"
        },
        {
            "header": "Introduction",
            "content": "\n<p>Audience is getting more and more everyday, data you should keeps growing. User's are getting more demanding.</p>\n<p>That brought need for different database solutions optimized for your needs. MongoDB is one of them when you need Statistics Data, Big Data, more powerful Nested Objects.</p>\n<p>Butterfly MongoDB implementation aims to make developer comfortable while writing queries and maintaining code for different database technologies.</p>\n<p>You can write down queries easier than ever using Butterfly. Just change your adapter and that's it. You can use built-in functions to handle most complex operations like Bulk Inserts,\nInsert Or Ignore operations, Insert Or Update operations, Fetching or updating specific columns.</p>\n"
        },
        {
            "header": "Configuration",
            "content": "\n<p>The database configurations are stored in <code>app/config/database.php</code>. Configurations can be customized by domain name with subfolders.\nExample configuration:</p>\n<p>```php\n&lt;?php</p>\n<p>return [\n    'mongo-db' =&gt; [\n        'server' =&gt; 'http://localhost',\n        'adapter' =&gt; 'MongoDB',\n        'name' =&gt; 'COLLECTION_NAME',\n        'user' =&gt; 'MongoDB_USERNAME', // Remove this parameter if you don't have username\n        'password' =&gt; 'MongoDB_PASSWORD', // Remove this parameter if you don't have username\n        'port' =&gt; 27017 // Optional. Defaults to 27017\n    ]\n];\n```</p>\n<h3>Using The Database Client</h3>\n<p>Database client can be reached using <code>db()</code> helper. You can also reach defined databases using the database alias as the first parameter.</p>\n<p><code>php\ndb('mongo-db');</code></p>\n<blockquote>\n<p>[!WARNING]\n<code>mongo-db</code> in this example is the database alias defined in configuration.</p>\n</blockquote>\n<p>You can define multiple databases for different purposes. For example, you may create a logging MongoDB Instance / Database.</p>\n"
        },
        {
            "header": "Transactions",
            "content": "\n<p>Transactions are not supported for MongoDB.</p>\n"
        },
        {
            "header": "Running Queries",
            "content": "\n<h3>search Function</h3>\n<p>Since Elastic Search's main focus is searching, you can use <code>search</code> function to make a generic search:</p>\n<p>Example:</p>\n<p><code>php\n$users = db()\n    -&gt;from('users')\n    -&gt;search('test', ['name', 'surname', 'email'])\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\":{\n      \"query_string\": {,\n            \"query\":\"test\",\n            \"fields\": [\"name\", \"surname\",\"email\"]\n      }\n}</code></p>\n<p>and search for <code>test</code> in <code>name</code>, <code>surname</code>, <code>email</code> fields.</p>\n<h3>SELECT Queries</h3>\n<p><code>php\n$users = db()\n   -&gt;from('users')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\"query\":{\"match_all\":{}}}</code></p>\n<p>and return all results as associative array.</p>\n<h4>Specifying Columns</h4>\n<p>You may want to return specific columns:</p>\n<p><code>php\n$users = db()\n    -&gt;from('users', ['id', 'name'])\n    -&gt;get();</code></p>\n<p>will run query:</p>\n<p><code>json\n{\"query\": {\"match_all\": {}}, \"_source\":[\"id\",\"name\"]}</code></p>\n<h4>Where</h4>\n<p>You can write where clauses in many ways. Examples are the following:</p>\n<p><code>php\n$user = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;first();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\"query\":{\"query_string\":{\"query\":\"(id:5)\"}}}</code></p>\n<p>and return one row as associative array.</p>\n<blockquote>\n<p>[!WARNING]\nUnlike MySQL Where Clauses, Elastic Search doesn't match only exact phrase when you search inside Text fields. For example: if you run <code>-&gt;where('name', 'John')</code> it will return rows where name is John or John Doe.\nIf you want to return exact records with name: John, you should use <code>keyword</code> field type, instead of <code>text</code>.</p>\n</blockquote>\n<h5>whereIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereIn('id', [1,2,3])\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotIn</h5>\n<p>You can use arrays with where clauses:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotIn('id', [1,2,3])\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"NOT id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNull</h5>\n<p>By using <strong>whereNull</strong>, you can easily filter only null values:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"NOT _exists_:status\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;whereNotNull('status')\n    -&gt;get();</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"_exists_:status\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>Nested Clause</h5>\n<p>Nested SQL Queries can be generated using callback functions.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhere('status', 2)\n    -&gt;orWhere(function($query) {\n        return $query-&gt;where('votes', '&lt;', '500')\n            -&gt;orWhere('status', 3);\n    })\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<p>As you can see below, queries inside of the function will be evaluated seperately inside of braces and it will run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (status:2) OR ((votes&lt;500) AND (status:3))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhere</h5>\n<p>You can also use operators in where clauses. If you pass where clauses as an array, all clauses in the array will be joined using <code>AND</code> operator.</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 3)\n    -&gt;orWhere([\n        ['votes', '&lt;', '500'],\n        ['status', 3]\n    ])\n    -&gt;get();</code></p>\n<p>will run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:3) OR ((votes&lt;500) AND (status:3))\"\n    }\n  }\n}</code></p>\n<h5>orWhereIn</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 2)\n    -&gt;orWhereIn('id', [5, 10])\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:2) OR id:(5 OR 10)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhereNull('status')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (NOT _exists_:status)\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNotNull</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;orWhereNotNull('status')\n    -&gt;get()\n;</code></p>\n<p>will run the query:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(id:5) OR (_exists_:status)\"\n    }\n  }\n}</code></p>\n<h5>Distinct</h5>\n<p>Distinct query is not supported by Elastic Search Adapter.</p>\n<h5>whereBetween</h5>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;whereBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) AND (id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>boostWhere</h5>\n<p>```php\ndb()-&gt;from('users')\n    -&gt;boostWhere(5, function($query) {\n        $query-&gt;where('id', 5);\n        $query-&gt;orWhere('type', 'test');</p>\n<pre><code>    return $query;\n})\n-&gt;orWhere('status', 2)\n-&gt;get()\n</code></pre>\n<p>;\n```</p>\n<p>will run:</p>\n<p>```json\n{\n 'query': {\n    'query_string': {\n        'query':'((id:5) OR (type:\"test\"))^5 OR (status:2)',\n        'default_operator':'and'\n    }\n}</p>\n<p>```</p>\n<h5>orBoostWhere</h5>\n<p>```php\ndb()-&gt;from('users')\n    -&gt;where('status', 2)\n    -&gt;orBoostWhere(5, function($query) {\n        $query-&gt;where('id', 5);\n        $query-&gt;orWhere('type', 'test');</p>\n<pre><code>    return $query;\n})\n-&gt;get()\n</code></pre>\n<p>;\n```</p>\n<p>will run:</p>\n<p><code>json\n{\n 'query': {\n    'query_string': {\n        'query':'(status:2) OR ((id:5) OR (type:\"test\"))^5',\n        'default_operator':'and'\n    }\n}</code></p>\n<h5>orWhereBetween</h5>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;orWhereBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get()\n;</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) OR (id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>orWhereNotBetween</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;orWhereNotBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get();</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) OR (NOT id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h5>whereNotBetween</h5>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;where('status', 5)\n    -&gt;whereNotBetween('id', 1, 20)\n    -&gt;orderByDesc('id')\n    -&gt;get();</code>\nwill run:</p>\n<p><code>json\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"(status:5) AND (NOT id:(1 TO 20))\"\n    }\n  },\n  \"sort\": [\n    {\n      \"id\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}</code></p>\n<h4><code>Join</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h5><code>Left Join</code></h5>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h5><code>Right Join</code></h5>\n<blockquote>\n<p>[!WARNING]\n<code>Join</code> Functions are not supported by Elastic Search.</p>\n</blockquote>\n<h4><code>Use Index</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>useIndex</code> is supported by Elastic Search. Will not produce an error but it will just ignore this function call.</p>\n</blockquote>\n<h4><code>Force Index</code></h4>\n<blockquote>\n<p>[!WARNING]\n<code>forceIndex</code> is supported by Elastic Search. Will not produce an error but it will just ignore this function call.</p>\n</blockquote>\n<h4>Order By</h4>\n<p>You can order by column ascending or descending order:</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderBy('id')\n    -&gt;get();</code></p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;orderByDesc('id')\n    -&gt;get();</code></p>\n<h4>Group By</h4>\n<p>You can use group by function to get aggregations in Elastic Search Implementation</p>\n<p><code>php\n$users = db()-&gt;from('users')\n    -&gt;groupBy('status')\n;\n$result = $users-&gt;get();\n$aggregations = $users-&gt;aggregations();</code></p>\n<p>will return</p>\n<p><code>php\nreturn [\n    'status' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]\n    ]\n];</code></p>\n<p>For multiple columns, you can use array:</p>\n<p>```php\n$users = db()-&gt;from('users')\n    -&gt;groupBy(['status','votes'])\n;</p>\n<p>$result = $users-&gt;get();\n$aggregations = $users-&gt;aggregations();\n```</p>\n<p>will return</p>\n<p><code>php\nreturn [\n    'status' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]\n    ],\n    'votes' =&gt; [\n        'buckets' =&gt; [\n            [\n                'key' =&gt; 2,\n                'doc_count' =&gt; 2\n            ],\n            [\n                'key' =&gt; 3,\n                'doc_count' =&gt; 1\n            ]\n        ]\n    ]\n];</code></p>\n<h4>Group By Range</h4>\n<p>You can define ranges to get aggregations using Elastic Search Range Spec.</p>\n<p>Example:</p>\n<p>```php\n$select-&gt;from('users', ['id'])-&gt;groupByRange('price', [\n    0 =&gt; 100,\n    100 =&gt; 200,\n    200 =&gt; 0\n])-&gt;get();</p>\n<p>$aggregations = $select-&gt;aggregations();\n```</p>\n<p>will return:\n<code>php\n[\n    'price_range' =&gt; [\n        'buckets' =&gt; [\n            \"*-100.0\" =&gt; [\n                'to' =&gt; 100,\n                'doc_count' =&gt; 2\n            ],\n            \"100.0-200.0\" =&gt; [\n                'from' =&gt; 100,\n                'to' =&gt; 200,\n                'doc_count' =&gt; 2\n            ],\n            \"200.0-*\" =&gt; [\n                'from' =&gt; 200,\n                'doc_count' =&gt; 2\n            ]\n    ]\n]</code></p>\n<h4>Having</h4>\n<blockquote>\n<p>[!WARNING]\nHaving is not supported by Elastic Search. It will throw error: \"Having function is not supported by ElasticSearch\"</p>\n</blockquote>\n<h4>Limit</h4>\n<p>Results can be limited using limit function. Only the first number of rows will be returned.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;limit(10);</code></p>\n<p>Will run the query:</p>\n<p><code>json\n{\n  \"size\": 10\n}</code></p>\n<p>And will return first 10 rows from <code>users</code> index.</p>\n<h4>Pagination</h4>\n<blockquote>\n<p>[!WARNING]\nPagination doesnt work correctly in Elastic Search if no sorting is set. Please use orderBy functions before calling pagination</p>\n</blockquote>\n<p>You can define paginate results by using <code>paginate</code> function.</p>\n<p>Parameter | Description | Default Value\n--------- | ----------- | -----------\n<code>$limit</code> | Sets the limit per page | 20\n<code>$page_no</code> | Sets the current page  | 1</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;paginate(5, 2)\n    -&gt;get();</code></p>\n<p>Will run the following query:</p>\n<p><code>json\n{\n  \"size\": 5,\n  \"from\": 5\n}</code></p>\n<p>And will return the results from 2nd page starting from <code>6.</code> to <code>10.</code> record.</p>\n<h4>Find</h4>\n<p>You can use <code>find</code> function to return one row using identifier</p>\n<p><code>php\n$user = db()\n    -&gt;from('users')\n    -&gt;find(1);</code></p>\n<p>will return one row with id = 1</p>\n<h4>Die</h4>\n<p>For debugging purposes, you can use <code>die</code> function to output the SQL Query that will run.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;die();</code></p>\n<p>will output the query that will be executed.</p>\n<blockquote>\n<p>[!NOTE]\n<code>die</code> function will not run the query, just outputs it and <strong>terminates the script</strong>.</p>\n</blockquote>\n<h4>Returning Functions</h4>\n<p>Returning functions are used to execute the query and return the processed result.</p>\n<p>Let's think of a virtual <code>users</code> table with the following records:</p>\n<p>id | name | status\n--- | --- | ---\n1 | John Doe | waiting\n2 | Jane Doe | waiting\n3 | Jack Hamel | active</p>\n<h5>get</h5>\n<p>Will return all rows as associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;get();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    [\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'\n    ],\n    [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'\n    ],\n    [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'\n    ]\n];</code></p>\n<h5>first</h5>\n<p>Will just return the first row as associative array</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting'\n];</code></p>\n<h5>count</h5>\n<p>Will return the number of rows for the query without any Group By statement.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;count();</code></p>\n<p>will return:</p>\n<p><code>(int) 3</code></p>\n<h5>one</h5>\n<p>Will return only one column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;one('name');</code></p>\n<p>will return the name column value of the first row.</p>\n<p><code>John Doe</code></p>\n<h5>column</h5>\n<p>Will return the values of specific column as an array list</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;column('name');</code></p>\n<p>will return names as an array list.</p>\n<p><code>php\n[\n    'John Doe',\n    'Jane Doe',\n    'Jack Hammel'\n];</code></p>\n<h5>keyToValue</h5>\n<p>Will return result indexed by key_column. Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    1 =&gt; [ // As you see, id column value is used as the key of the array.\n        'id' =&gt; 1,\n        'name' =&gt; 'John Doe',\n        'status' =&gt; 'waiting'\n    ],\n    2 =&gt; [\n        'id' =&gt; 2,\n        'name' =&gt; 'Jane Doe',\n        'status' =&gt; 'waiting'\n    ],\n    3 =&gt; [\n        'id' =&gt; 3,\n        'name' =&gt; 'Jack Hamel',\n        'status' =&gt; 'active'\n    ]\n];</code></p>\n<p>When you call keyToValue function with two parameters, it will use the column value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValue('id', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be value of the specified column:</p>\n<p><code>php\n[\n    1 =&gt; 'John Doe',\n    2 =&gt; 'Jane Doe',\n    3 =&gt; 'Jack Hamel'\n];</code></p>\n<h5>keyToValues</h5>\n<p>when key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be the row as the associative array.</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status')\n;</code></p>\n<p>will return:</p>\n<p><code>php\n[\n    'waiting' =&gt; [ // As you see, results are grouped by `status` column.\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'John Doe',\n            'status' =&gt; 'waiting'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'Jane Doe',\n            'status' =&gt; 'waiting'\n        ]\n    ],\n    'active' =&gt; [\n        [\n            'id' =&gt; 3,\n            'name' =&gt; 'Jack Hamel',\n            'status' =&gt; 'active'\n        ]\n    ]\n];</code></p>\n<p>When key_column is not unique, you can use this function to group results by key_column (e.g. status). Value will be value of the specified column</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;keyToValues('status', 'name')\n;</code></p>\n<p>will return result indexed by key_column. Value will be array of values of the specified column:</p>\n<p><code>php\n[\n    'waiting' =&gt; [\n        'John Doe',\n        'Jane Doe'\n    ],\n    'active' =&gt; [\n        'Jack Hamel'\n    ]\n];</code></p>\n<h5>max</h5>\n<p>Will return maximum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;max('id');</code></p>\n<p>will return:</p>\n<p><code>3</code></p>\n<h5>min</h5>\n<p>Will return minimum value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;min('id');</code></p>\n<p>will return:</p>\n<p><code>1</code></p>\n<h5>average</h5>\n<p>Will return average value of the specific column as a single value</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;average('id');</code></p>\n<p>will return:</p>\n<p><code>2</code></p>\n<h5>transform</h5>\n<p>Transform function is used to transform the returning rows.</p>\n<blockquote>\n<p>[!DANGER]\nTransform function should be called before returning functions.</p>\n</blockquote>\n<p><code>php\ndb()-&gt;from('users')-&gt;transform(function($row) {\n    $row['id_with_name'] = $row['id'] . ' - ' . $row['name'];\n    return $row;\n})-&gt;first();</code></p>\n<p>will return</p>\n<p><code>php\n[\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe',\n    'status' =&gt; 'waiting',\n    'id_with_name' =&gt; '1 John Doe'\n];</code></p>\n<h3>Caching Results</h3>\n<p>To improve performance of your application, you may want to cache results to use it multiple times. On the other hand,\nyou may need the same result in the same code (For example: in a background job, you may have a where query in for loop)\nFor these cases, if you use registry, then you may get rid of <code>Cache Driver Connection</code> time.</p>\n<h4>Cache</h4>\n<p>You can use cache function to cache results.</p>\n<h5>Without Parameters</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache()\n-&gt;get();</code></p>\n<p>will cache the result after first call for 60 seconds by default.</p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120)\n-&gt;get();</code></p>\n<p>will cache the result after first call for 120 seconds.</p>\n<blockquote>\n<p>[!TIP]\nResult will return result without caching if cache is disabled.</p>\n</blockquote>\n<h5>With Duration and Cache Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120, 'test-cache-key')\n-&gt;get();</code></p>\n<p>will cache the result using <code>test-cache-key</code> in Cache. Which means that, you can remove cache using following code:</p>\n<p><code>php\ncache()-&gt;delete('test-cache-key');</code></p>\n<h5>With Duration, Cache Key and Cache Driver</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;cache(120, 'test-cache-key', 'apc')\n-&gt;get();</code></p>\n<p>will cache the result using <code>test-cache-key</code> in Cache of <code>apc</code> Driver. Which means that, you can remove cache using following code:</p>\n<p><code>php\ncache('apc')-&gt;delete('test-cache-key');</code></p>\n<h4>Registry</h4>\n<p>You can use registry to cache results for the running code.</p>\n<h5>Without Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry()\n-&gt;get();</code></p>\n<p>will save the result to application registry and returned</p>\n<h5>With Registry Key</h5>\n<p>Example:</p>\n<p><code>php\ndb()-&gt;from('users')\n    -&gt;where('id', 5)\n    -&gt;registry('test-key')\n-&gt;get();</code></p>\n<p>will save the result to application registry using <code>test-key</code> as key. Which means that, you can access and manipulate result\nusing following code block:</p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::get('test-key');</code></p>\n<p><code>php\n\\Butterfly\\Framework\\Registry\\Registry::set('test-key', [\n    'changed-data'\n]);</code></p>\n<blockquote>\n<p>[!TIP]\nAlthough you may use registry keys while saving results to registry, there is no known use case for this feature :)</p>\n</blockquote>\n<h3>INSERT Queries</h3>\n<p>You can run insert queries using database client.</p>\n<h4>Insert</h4>\n<p>Single insert statement can be run as the following example:</p>\n<p><code>php\n$userId = db()-&gt;table('users')-&gt;insert([\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will return the auto increment id of the created row.</p>\n<h4>Insert with raw values</h4>\n<p>Insert statements can use raw column values</p>\n<p><code>php\n$userId = db()-&gt;table('users')\n  -&gt;insert([\n      'id' =&gt; 1,\n      'name' =&gt; 'foo',\n      'created_at' =&gt; db()-&gt;raw('CURRENT_TIMESTAMP()')\n]);</code></p>\n<p>will run the following query:</p>\n<p><code>sql\nINSERT INTO `users` (`id`,`name`,`created_at`) VALUES (1,'foo',CURRENT_TIMESTAMP());</code></p>\n<h4>InsertOrUpdate</h4>\n<p>Inserts or updates single record. First parameter is used to find if the row already exist,\n- There are two options:\n    * If the record doesn't exist:\\\n    Both parameters will be merged and inserted into database.</p>\n<pre><code>* If the record exists:\\\nSince first parameters doesn't change, it will update the record with the values in $data array (Second Parameter)\n</code></pre>\n<p>Function returns auto increment value for the record for both cases.</p>\n<blockquote>\n<p>Note: This function doesn't use unique indexes. It's recommended to use indexed columns for better performance.</p>\n</blockquote>\n<p>```php\n$attribute = [\n    'id' =&gt; 1\n];</p>\n<p>$data = [\n    'name' =&gt; 'foo'\n];</p>\n<p>db()-&gt;table('users')\n    -&gt;insertOrUpdate($attribute, $data);\n```\nIt will check if there is a record having id =&gt; 1,\\\nif it doesnt exist, then this will become an insert statement.\\\nIf it exist, then, the call become an update statement.</p>\n<h4>InsertOrIgnore</h4>\n<p>When inserting a record to database, if there is a unique index, you may get an error. When this function is used, it ignores insert errors and returns without inserting the record on error. Which means that, the record will not be inserted if it already exist.</p>\n<p><code>php\ndb()-&gt;table('users')-&gt;insertOrIgnore([\n    'id' =&gt; 1,\n    'name' =&gt; 'John Doe'\n]);</code></p>\n<p>will not insert record if there is already a record with id = 1</p>\n<h4>BulkInsert</h4>\n<p>Bulk inserts can improve performance since multiple records will be inserted in a single query.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsert([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h4>BulkInsertOrUpdate</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to update the existing data.\nThere are two options:</p>\n<ul>\n<li>Updating all columns: Following query will update all columns if the records already exist.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n     -&gt;bulkInsertOrUpdate([\n         [\n             'id' =&gt; 1,\n             'name' =&gt; 'foo',\n             'surname' =&gt; 'bar'\n         ],\n         [\n             'id' =&gt; 2,\n             'name' =&gt; 'John',\n             'surname' =&gt; 'Doe'\n         ]\n     ])\n ;</code></p>\n<ul>\n<li>Updating specific columns: Following query will only update the name column if the unique key already exist for the records.</li>\n</ul>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrUpdate([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ], [\n        'name'\n    ])\n;</code></p>\n<h4>BulkInsertOrIgnore</h4>\n<p>When bulk inserting data, if there is a unique index and new data already exists, than you may want to ignore the new data without any error.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;bulkInsertOrIgnore([\n        [\n            'id' =&gt; 1,\n            'name' =&gt; 'foo',\n            'surname' =&gt; 'bar'\n        ],\n        [\n            'id' =&gt; 2,\n            'name' =&gt; 'John',\n            'surname' =&gt; 'Doe'\n        ]\n    ])\n;</code></p>\n<h3>UPDATE Queries</h3>\n<p>You can run update queries using database client.</p>\n<h4>Update</h4>\n<p>Simple update statement can be run as the following example:</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<h4>Limit</h4>\n<p>You can limit the number of rows the update query can update by using limit function.</p>\n<p><code>php\ndb()-&gt;table('users')\n    -&gt;where('id', 1)\n    -&gt;limit(1)\n    -&gt;update([\n        'name' =&gt; 'foo',\n        'surname' =&gt; 'bar'\n    ]);</code></p>\n<p>will update column where <code>id = 1</code></p>\n<h4>Where Clause</h4>\n<blockquote>\n<p><strong>Note:</strong> You can use all type of where clauses with update queries. Please check <a href=\"#where-1\">WHERE</a> section for this.</p>\n</blockquote>\n<h3>DELETE Queries</h3>\n<p>You can run delete queries using database client.</p>\n<h4>Delete</h4>\n<p>Simple delete statement can be run as the following example:</p>\n<p><code>php\n$affected = db()-&gt;table('users')\n    -&gt;where('id', 5)\n    -&gt;delete()\n;</code></p>\n<p>will delete column where <code>id = 5</code> and will return <code>number of rows affected</code>\n```</p>\n<h4>Join Statement</h4>\n<p>Elastic Search doesn't support join statements.</p>\n<h3>Performance Tips</h3>\n<p>Butterfly Database implementation gives opportunity for developers to get same expected result from all databases. Elastic Search \nqueries runs in background by default, but in Butterfly when you send an insert query it waits for query to be finalized.</p>\n<p>You can call <code>runInBackground</code> function before sending insert queries to make queries asynchronous on Elastic Search.\nIf you want your code to wait until all queued insert tasks finish, you can use <code>db('elastic-search')-&gt;from(''')-&gt;refresh()</code></p>"
        }
    ]
}