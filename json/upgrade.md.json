{
    "file_name": "upgrade.md",
    "sections": [
        {
            "header": "Upgrade",
            "content": "\n<p>Butterfly's main aim is to make upgrades as easy as possible. Database schema changes, file additions, new objects and \neach entity is upgraded with just a single command.</p>\n"
        },
        {
            "header": "Upgrade locally",
            "content": "\n<p>For a smooth upgrade, please check the following steps:</p>\n<blockquote>\n<p>[!WARNING]\nNew versions may add new files to the system, in order to commit new files to your Code Repository (Most possible git) \nrun the updates locally.</p>\n</blockquote>\n<h3>Step 1</h3>\n<p>Run the following command on your local:</p>\n<p><code>bash\ncomposer update</code> </p>\n<h3>Step 2</h3>\n<p>Run the following command for schema and file system changes:</p>\n<p><code>bash\nbin/butterfly upgrade</code> </p>\n<blockquote>\n<p>[!WARNING]\nThis may update your files and database.</p>\n</blockquote>\n<h3>Step 3</h3>\n<p>Check your local setup and commit composer.lock file to git.</p>\n<blockquote>\n<p>[!TIP]\nCommiting <code>composer.lock</code> file will ensure all servers and developer machines will have the same versions when you run <code>composer install</code> command \non the other environments.</p>\n</blockquote>\n"
        },
        {
            "header": "Upgrading on Production",
            "content": "\n<blockquote>\n<p>[!WARNING]\nBefore production upgrade, you should first apply the upgrade locally.</p>\n</blockquote>\n<h3>Step 1</h3>\n<p>Deploy the code to your server.</p>\n<h3>Step 2</h3>\n<p>Run the following command to update packages:</p>\n<p><code>bash\ncomposer install</code></p>\n<blockquote>\n<p>[!WARNING]\nPlease be sure that composer.lock file is not ignored in git and you have composer.lock file in git.</p>\n</blockquote>\n<h3>Step 3</h3>\n<p>Run the following command to make database changss:</p>\n<p><code>bash\nbin/butterfly upgrade</code></p>\n<blockquote>\n<p>[!TIP]\nWhen you run upgrade command on your local computer, file changes will be applied to your code repository and you commit the \nchanges. Since changes will already been commited to your git server, it won't be applied again. On your server, only database changes\nwill be applied on production.</p>\n</blockquote>\n"
        },
        {
            "header": "Version Upgrade Notes",
            "content": "\n<h3>1.5.171</h3>\n<p>Although there is no breaking change in version 1.5.171, ElasticSearch queries are being migrated to new dynamic\n<a href=\"https://thebutterfly.io/docs/#/database?id=elastic-search\">Database</a> Layer. Because of this, elastic-search database\nconfig should be added to app/Config/database.php or app/Config/DOMAIN/database.php or app/Config/ENVIRONMENT/database.php</p>\n<h3>1.5.116</h3>\n<ul>\n<li>Please change your webserver config and point root folder to <code>/public</code> folder. If the previous folder was <code>/var/www/vhosts/thebutterfly.io/</code> \nnow, it should be <code>/var/www/vhosts/thebutterfly.io/public</code>. Please beware that your site will be down if you don't change your Document Root. </li>\n</ul>\n<h3>1.5.78</h3>\n<p>Version 1.5.78 has some breaking changes. Please check the following points:\n- You should use <code>twig</code> templates instead of <code>smarty</code> for Frontend.\n- You should use <code>.twig</code> extension instead of <code>.tpl</code>\n- Widgets are extended from <code>\\Butterfly\\Framework\\Widget\\Base</code> instead of <code>\\Butterfly\\Library\\Widget</code></p>\n<blockquote>\n<p>[!TIP]\nYou can use <code>bin/butterfly convert:twig app/</code> command to convert your tpl's to twig files inside of your app directory.</p>\n</blockquote>\n<h3>1.5.74</h3>\n<p>Version 1.5.74 has some breaking changes. Please check the following points:\n- Content Pool Items and Detail Info includes all sizes of the image with full path.\nExample: You should use <code>{$item.image.100x100}</code> instead of <code>{path alias=\"100x100\"}{$item.image}</code></p>\n<h3>1.6.0</h3>\n<p>Version 1.6.0 has some breaking changes. Please check the following points:</p>\n<h4>Step 1:</h4>\n<p>Add post install and post upgrade scripts to your <code>composer.json</code> file</p>\n<p><code>json\n  \"scripts\": {\n    \"post-install-cmd\": \"\\\\Butterfly\\\\Core\\\\Migration\\\\Composer::postInstall\",\n    \"post-update-cmd\": \"\\\\Butterfly\\\\Core\\\\Migration\\\\Composer::postUpdate\"\n  }</code></p>\n<h4>Step 2:</h4>\n<p>Update your composer.json file to use butterfly/core <code>1.6.*</code></p>\n<h4>Step 3:</h4>\n<p>Run composer update command</p>\n<h4>Step 4:</h4>\n<p>Add default cache configuration to cache.php files for all domains. <a href=\"https://thebutterfly.io/docs/#/cache?id=configuration\">Cache Configuration</a></p>\n<h4>Step 5:</h4>\n<p>Update application code to use <code>cache()</code> function to access cache instead of <code>Cache::</code> syntax. <a href=\"https://thebutterfly.io/docs/#/cache?id=cache-operations\">Cache Usage</a></p>\n<p>Example cache config file:</p>\n<p><code>php\nreturn [\n    'default' =&gt; [\n        'adapter' =&gt; 'Redis',\n        'prefix' =&gt; '[' . HOST . ']',\n        'server' =&gt; '127.0.0.1',\n        'password' =&gt; null // Optional\n    ]\n];</code></p>\n<h4>Step 6:</h4>\n<p>Run <code>bin/butterfly upgrade</code> and commit update files to your repository after doing local tests.</p>\n<h4>Step 7:</h4>\n<p>Verify that following constants are not used in your views and application code. If it is used, \nreplace with new versions.</p>\n<p>Removed constants and replacements:</p>\n<p>Constant Name | Replace with\n--- | ---\n<code>DB_SERVER</code> | <code>\\Config::get('database.default.server')</code>\n<code>DB_NAME</code> | <code>\\Config::get('database.default.name')</code>\n<code>DB_USERNAME</code> | <code>\\Config::get('database.default.user')</code>\n<code>DB_PASSWORD</code> | <code>\\Config::get('database.default.password')</code>\n<code>DB_PORT</code> | <code>\\Config::get('database.default.port')</code>\n<code>DEVEL</code> | <code>\\Config::get('app.devel')</code>\n<code>SITE_URL</code> | <code>\\Config::get('app.url')</code>\n<code>PROJECT_NAME</code> | <code>\\Config::get('app.name')</code>\n<code>FB_APP_ID</code> | <code>\\Config::get('social.facebook.id')</code>\n<code>FB_APP_SECRET</code> | <code>\\Config::get('social.facebook.secret')</code>\n<code>TWITTER_KEY</code> | <code>\\Config::get('social.twitter.key')</code>\n<code>TWITTER_APP_SECRET</code> | <code>\\Config::get('social.twitter.secret')</code>\n<code>ASSET_SITE</code> | <code>\\Config::get('asset.asset_site')</code>\n<code>ASSET_URL</code> | <code>\\Config::get('asset.asset_url')</code>\n<code>USE_MINIFIED</code> | <code>\\Config::get('asset.use_minified')</code>\n<code>SUPER_PASSWORD</code> | <code>\\Config::get('security.super_password')</code>\n<code>DISABLE_ADMIN</code> | <code>\\Config::get('security.disable_admin')</code>\n<code>SECRET_KEY</code> | <code>\\Config::get('security.secret_key')</code></p>\n<p>Following constants are removed:</p>\n<p><code>IMAGES_URL</code>\n<code>STATIC_BASE_URL</code>\n<code>STATIC_BASE_FOLDER</code>\n<code>FRONTEND_FOLDER</code>\n<code>SITEMAP_DIR</code>\n<code>CAPTCHA_PUB_KEY</code>\n<code>CAPTCHA_PRIV_KEY</code>\n<code>DISABLE_CACHE</code>\n<code>RABBITMQ_SERVER</code>\n<code>DISABLE_QUEUE</code></p>\n<h3>1.7</h3>\n<p>Version 1.7 has some breaking changes. Please check the following points:</p>\n<p>Admin Panel Links are now depth of 3. First level is for module, second is for the group and the third is\n   for the objects which are shown as tabs.</p>\n<h3>1.8</h3>\n<p>Version 1.8 has some breaking changes. Please check the following points:</p>\n<p>1) Reporting pages are moved from report/list to cms_report/list. All other links are updated respectively.\n2) Removed Constants:\n   - <code>ENVIRONMENT</code> (No replacement)\n3) app/.domain file is removed\n4) Remove all folder based configurations and use $_ENV variables to make it work in multiple environments</p>"
        }
    ]
}