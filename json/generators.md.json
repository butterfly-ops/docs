{
    "file_name": "generators.md",
    "sections": [
        {
            "header": "Generators",
            "content": "\n<p>Generators make it easy to create new files like Controller, Model, Widget, Hook etc. You can use generators by various make commands.</p>\n<blockquote>\n<p>[!TIP]\nYou can reach list of generators by running <code>bin/butterfly list make</code> command.</p>\n</blockquote>\n<p>Command | Description\n--- | ---\ncontroller | Generates new Controller\nhook | Generates new Hook for creating hooks\nmodel | Generates new Model\nwidget | Generates new Widget\ncontent-widget | Generates new Content Listing Widget</p>\n"
        },
        {
            "header": "Controller",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\ncontroller | Controller Name | Yes\nfolder | Folder Name | No</p>\n<p><code>bash\n bin/butterfly make:controller Detail Commerce/Product</code></p>\n<p><code>bash\nFile created in \"app/Controller/Commerce/Product/Detail.php\";</code></p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Controller\\Commerce\\Product;</p>\n<p>use Butterfly\\Framework\\Controller\\Action;</p>\n<p>class Detail extends Action\n{\n    public function indexAction() {</p>\n<pre><code>}\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "Command",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nclass | Class Name | Yes</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nname | Function Name | Yes</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\ndescription | Description | No (Optional)</p>\n<p><code>bash\n bin/butterfly make:command User user:login:update 'User login update'</code></p>\n<p><code>bash\nFile created in \"app/Command/User.php\";</code>\n```php\n&lt;?php\nnamespace App\\Command;</p>\n<p>use Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;</p>\n<p>class User extends Command\n{\n    public function configure()\n    {\n        $this-&gt;setName(\"user:login:update\")-&gt;setDescription(\"User login update\");\n        parent::configure();\n    }</p>\n<pre><code>public function execute(InputInterface $input, OutputInterface $output)\n{\n}\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "twig-filter",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nname | Filter Name | Yes</p>\n<p><code>bash\nbin/butterfly make:twig:filter test_filter</code></p>\n<p><code>bash\nFilter created in \"app/View/TwigFilter/TestFilter.php</code></p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\View\\TwigFilter;</p>\n<p>class TestFilter\n{\n    public function filter($parameter)\n    {\n        return $parameter;\n    }\n}\n```</p>\n"
        },
        {
            "header": "twig-function",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nname | Function Name | Yes</p>\n<p><code>bash\nbin/butterfly make:twig:function test_function</code></p>\n<p><code>bash\nFilter created in \"app/View/TwigFunction/TestFunction.php</code></p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\View\\TwigFunction;</p>\n<p>class TestFunction\n{\n    public function execute($params)\n    {</p>\n<pre><code>    return print_r($params, true);\n}\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "Model",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nmodel | Model Name | Yes\nfolder | Folder Name | No</p>\n<p><code>bash\n bin/butterfly make:model Detail Commerce/Product</code></p>\n<p><code>bash\nFile created in \"app/Model/Commerce/Product/Detail.php\";</code></p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Model\\Commerce\\Product;</p>\n<p>use Butterfly\\Library\\Model;</p>\n<p>class Detail extends Model\n{\n    public $_name = \"Detail\";\n}\n```</p>\n"
        },
        {
            "header": "Hook",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nhook | Hook Name | Yes</p>\n<p><code>bash\n bin/butterfly make:hook User</code></p>\n<p><code>bash\nFile created in \"app/Hook/User.php\";</code>\n```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Library\\Hook;</p>\n<p>class User extends Hook\n{</p>\n<p>}\n```</p>\n"
        },
        {
            "header": "Event",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nclass | Class Name | Yes</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nfunc | Function Name | Yes</p>\n<p><code>bash\n bin/butterfly make:event User login</code></p>\n<p><code>bash\nFile created in \"app/Event/User.php\";</code>\n```php\n&lt;?php</p>\n<p>namespace App\\Event;</p>\n<p>use Butterfly\\Library\\Hook;</p>\n<p>class User extends Hook\n{\n    public function login()\n    {</p>\n<pre><code>}\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "Widget",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nwidget | Widget Name | Yes\nfolder | Folder Name | No</p>\n<h3>Without Folder</h3>\n<p>If you are creating a general widget, which you need it directly in <code>app/Widget/</code>, you can use command without a folder.</p>\n<p>Example: </p>\n<p><code>bash\nbin/butterfly make:widget Product</code></p>\n<p>```bash\nFile successfully created in app/Widget/Product/Product.php\nFile successfully created in app/Widget/Product/Product.tpl\nFile successfully created in app/Widget/Product/parameters.yaml</p>\n<p>```</p>\n<p>Php file:\n```php\n&lt;?php\nnamespace App\\Widget\\Product;</p>\n<p>class Product extends \\Butterfly\\Library\\Widget\n{\n    protected $_friendly_name = \"Product\";</p>\n<pre><code>public function init() {\n\n    return $this-&gt;render();\n}\n</code></pre>\n<p>}\n```</p>\n<h3>With Sub Folders</h3>\n<p>If you want to group your widgets, you can use second parameter to create your widget in a sub folder. Sub folder will be located in <code>app/Widget/</code>, you can use deeper folders.</p>\n<p>Example: </p>\n<p><code>bash\nbin/butterfly make:content-widget ProductDetail General/Products</code></p>\n<p><code>bash\nFile successfully created in app/Widget/General/Products/ProductDetail/ProductDetail.php\nFile successfully created in app/Widget/General/Products/ProductDetail/ProductDetail.tpl\nFile successfully created in app/Widget/General/Products/ProductDetail/parameters.yaml</code></p>\n<p>Php file:\n```php\n&lt;?php\nnamespace App\\Widget\\General\\Products\\ProductDetail;</p>\n<p>class ProductDetail extends \\Butterfly\\Library\\Widget\n{\n    protected $_friendly_name = \"Product Detail\";</p>\n<pre><code>public function init() {\n\n    return $this-&gt;render();\n}\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "Content Widget",
            "content": "\n<p>Parameters:</p>\n<p>Parameter Name | Description | Required\n--- | --- | ---\nwidget | Widget Name | Yes\nfolder | Folder Name | No</p>\n<p>Content Widget is a type of Widget which aims to display your contents. Content Widgets accepts Content Pool parameter to \ndetermine data that will be displayed.</p>\n<p>Content Pools make it easy to make your display layer content agnostic. Which means that, you can change the data to be displayed without changing your code.</p>\n<p>You can get more details from Content Pools Section.</p>\n<h3>Without Folder</h3>\n<p>If you are creating a general widget, which you need it directly in <code>app/Widget/</code>, you can use command without a folder.</p>\n<p>Example: </p>\n<p><code>bash\nbin/butterfly make:content-widget Product</code></p>\n<p>```bash\nFile successfully created in app/Widget/Product/Product.php\nFile successfully created in app/Widget/Product/Product.tpl\nFile successfully created in app/Widget/Product/parameters.yaml</p>\n<p>```</p>\n<p>Php file:\n```php\n&lt;?php\nnamespace App\\Widget\\Product;</p>\n<p>class Product extends \\Butterfly\\Framework\\Widget\\ContentPool\n{\n    protected $_friendly_name = \"Product\";\n    protected $content_pools = ['content_pool_id'];</p>\n<pre><code>public function init() {\n    parent::init();\n\n    return $this-&gt;render();\n}\n</code></pre>\n<p>}\n```</p>\n<p>Template file:\n```smarty</p>\n<ul>\n{foreach $contents.content_pool_id.item as $item}\n    <li>\n<a href=\"/{$item.seo}\" title=\"{$item.label} - {$item.title}\">\n            {$item.label}\n        e App\\Widget\\General\\Products\\ProductDetail;\n\nclass ProductDetail extends \\Butterfly\\Framework\\Widget\\ContentPool\n{\n    protected $_friendly_name = \"Product Detail\";\n    protected $content_pools = ['content_pool_id'];\n\n    public function init() {\n        parent::init();\n\n        return $this-&gt;\n    ss ProductDetail extends \\Butterfly\\Framework\\Widget\\ContentPool\n{\n    protected $_friendly_name = \"Product Detail\";\n    protected $content_pools = ['content_pool_id'];\n\n    public function init() {\n        parent::init();\n\n        return $this-&gt;\n{/foreach}\n{\n    protected $_friendly_name = \"Product Detail\";\n    protected $content_pools = ['content_pool_id'];\n\n    public function init() {\n        parent::init();\n\n        return $this-&gt;\n<p>```</p>\n<p>Yaml file:\n<code>yaml\ncontent_pool_id:\n    name: 'Content Pool'\n    column_name: content_pool_id\n    type: content_pool</code></p>\n<h3>With Sub folders</h3>\n<p>If you want to group your widgets, you can use second parameter to create your widget in sub folder. Sub folder will be located in <code>app/Widget/</code>, you can use deeper folders.</p>\n<p>Example: </p>\n<p><code>bash\nbin/butterfly make:content-widget ProductDetail General/Products</code></p>\n<p><code>bash\nFile successfully created in app/Widget/General/Products/ProductDetail/ProductDetail.php\nFile successfully created in app/Widget/General/Products/ProductDetail/ProductDetail.tpl\nFile successfully created in app/Widget/General/Products/ProductDetail/parameters.yaml</code></p>\n<p>Php file:\n```php\n&lt;?php\nnamespace App\\Widget\\General\\Products\\ProductDetail;</p>\n<p>class ProductDetail extends \\Butterfly\\Framework\\Widget\\ContentPool\n{\n    protected $_friendly_name = \"Product Detail\";\n    protected $content_pools = ['content_pool_id'];</p>\n<pre><code>public function init() {\n    parent::init();\n\n    return $this-&gt;render();\n}\n</code></pre>\n<p>}\n```</p>\n<p>Template file:\n```smarty</p>\n<ul>\n{foreach $contents.content_pool_id.item as $item}\n    <li>\n<a href=\"/{$item.seo}\" title=\"{$item.label} - {$item.title}\">\n            {$item.label}\n        </a>\n</li>\n{/foreach}\n</ul>\n<p>```</p>\n<p>Yaml file:\n<code>yaml\ncontent_pool_id:\n    name: 'Content Pool'\n    column_name: content_pool_id\n    type: content_pool</code></p></a></li></ul>"
        }
    ]
}