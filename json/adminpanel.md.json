{
    "file_name": "adminpanel.md",
    "sections": [
        {
            "header": "Admin Panel",
            "content": "\n<p>One of the most important features of Butterfly is it's Admin Panel. \n- You can create new Objects,\n- Create / Update Object Fields\n- Create / Edit your Content Sources,\n- Create / Edit your API's,\n- Manage your Content\n- Manage Search Engine Settings,\n- Change Look &amp; Feel of your Applications\n- Drag &amp; Drop new Widgets to your Applications\n- Add custom filters to your listing pages.</p>\n<p>and many more ...    </p>\n"
        },
        {
            "header": "Layout",
            "content": "\n<p>Admin Panel layout is the generic layout which includes all container information. You can customize admin panel layout \npublishing admin panel layout to <code>app/Views/Cms/layout.tpl</code> file path.</p>\n<p>Run the following command to publish admin template:</p>\n<p><code>bash\nbin/butterfly publish:admin:layout</code></p>\n<p>Blank template will look like the following code.</p>\n<p><code>smarty\n{include_tpl file=\"admin_layout\"}</code></p>\n<p>Congrats! You now have an admin layout file, works as is but now, you can make customizations.</p>\n<blockquote>\n<p>[!WARNING]\nThis command will not overwrite file in <code>app/Views/Cms/layout.tpl</code>. It fails and displays the following error and stops.</p>\n<p><code>File already exists, operation is canceled /Users/ozanakcora/Sites/butterfly-app/app/Views/Cms/layout.tpl\n   You can check file content\n   File should contain the following content:\n   {include_tpl file=\"admin_layout\"}</code> </p>\n</blockquote>\n"
        },
        {
            "header": "Objects",
            "content": "\n<p>Every created object comes with special management screens. You can list, add, edit, \nfrom it's auto-generated admin panel. You can even bulk edit, import or export your data. Besides having many unique features, \nManagement Screens can be customized easily.</p>\n<h3>Customizations</h3>\n<p>Let's think that you have an Object named: <code>Articles</code>. Fields in Users object are: <code>title</code>, <code>introduction</code> and <code>content</code>. Admin panel link\nof this page will be: <code>/admin/article/list</code>.</p>\n<h4>Controller</h4>\n<p>You can extend behaviour of a Object Controller. In order to extend, you can run the following command to publish Cms Controller.</p>\n<h5>List / Add / Edit Actions</h5>\n<p><code>bash\nbin/butterfly publish:admin:controller articles</code></p>\n<p>will create a file named <code>Article.php</code> under <code>app/Controller/Cms</code> directory with the following content:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Controller\\Cms;</p>\n<p>use Butterfly\\Library\\ObjectController;</p>\n<p>class Article extends ObjectController\n{\n    public function addAction($id = \"\", $extra = \"\")\n    {\n        parent::addAction($id, $extra);\n    }</p>\n<pre><code>public function editAction($id, $extra = '')\n{\n    parent::editAction($id, $extra);\n}\n\npublic function listAction($id, $extra)\n{\n    parent::listAction($id, $extra);\n}\n</code></pre>\n<p>}\n```</p>\n<p>Now you can update behaviours of the page by updating each function or you can add a new action to the current Controller.</p>\n<h5>Limit Per Page Options</h5>\n<p>By default, butterfly has the following options for limit per page on admin panel: <code>20, 100, 250, 1000</code>. Sometimes, you may need to \nchange this options. You can do the following steps to change limit per page options:</p>\n<p>1) Run <code>bin/butterfly publish:admin:controller</code> command to publish the controller if it is not already.</p>\n<p>Example:</p>\n<p><code>bash\nbin/butterfly publish:admin:controller articles</code></p>\n<p>2) Add <code>$_limit_per_page</code> and <code>$_page_limit_options</code> parameters to published class.</p>\n<p>Example:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Controller\\Cms;</p>\n<p>use Butterfly\\Library\\ObjectController;</p>\n<p>class Article extends ObjectController\n{\n    protected $_limit_per_page = 5;\n    protected $_page_limit_options = [5, 10, 100];\n}\n```</p>\n<h5>Custom Checkbox Filters</h5>\n<p>However Butterfly automatically creates filters on Admin Panel, sometimes you may need additional logical checkboxes.</p>\n<p>For example:\nYou may want to filter Stocks lower than 5 as Critical Stock when Critical Stock checkbox is selected.</p>\n<p>You can use addFilter function to add customized filters to your Listing Page.</p>\n<p>First you need to publish Controller for that Data Type.</p>\n<p>Example:\n<code>bash\nbin/butterfly publish:admin:controller articles</code></p>\n<p>Example:\n```php\nfunction listAction($id, $extra)\n{\n    $this-&gt;addFilter('checkbox', 'Get Valid Records', [\n        'join' =&gt; [\n            'INNER JOIN child_object_tests ON child_object_tests.article_id = articles.id'\n        ],\n        'where' =&gt; 'child_object_tests.is_valid = 1'\n    ]);</p>\n<pre><code>parent::listAction($id, $extra);\n</code></pre>\n<p>}\n```</p>\n<h4>Listing Page</h4>\n<h5>Full Layout</h5>\n<p>If you want to customize listing page, you can create a file called <code>list.tpl</code> as <code>app/Views/Cms/article/list.tpl</code></p>\n<blockquote>\n<p>[!TIP]\nYou can use <code>bin/butterfly publish:admin:template articles list</code> command to generate customization template.</p>\n</blockquote>\n<p>When you create an empty file, you can see that, listing page will also change to a blank page. If you want your custom \npage to work just like it was, you can place the following code to your template file.</p>\n<p><code>twig\n{{ include_file(\"Data/List\") }}</code></p>\n<p>Now, you have a listing page, just working as it was but now, you can add new code blocks to top or bottom of the page.</p>\n<h5>Action Buttons</h5>\n<p>You can add a new button to listing page for row specific actions. New button will be added to left or right of the default buttons.</p>\n<p>Add Action button to left:</p>\n<p>```smarty\n{$action_buttons.left[] = '<a class=\"btn14 mr5 topDir\" href=\"/admin/order/list?customer_id=\\&lt;id&gt;\" original-title=\"Customer Orders\" title=\"\"><img alt=\"\" src=\"/assets/core/admin/images/icons/dark/cart.png\"/>ctController;</a></p>\n<p>class Category extends ObjectController\n{\n    public $list_hierarchy_column_name = 'parent_id';</p>\n<pre><code>public function addAction($id = \"\", $extra = \"\")\n{\n    parent::addAction($id, $extra);\n}\n\npublic function editAction($id, $extra = '')\n{\n    parent::editAction($id, $extra);\n}\n\npublic function listAction($id, $extra)\n{\n    parent::listAction($id, $extra);\n}\n</code></pre>\n<p>}\n```</p>\n<h4>Add Page</h4>\n<p>If you want to customize add page, you can create a file called Add.twig as <code>app/Views/Cms/Article/Add.twig</code></p>\n<p>When you create an empty file, you can see that, add form page will also change to a blank page. If you want your custom \npage to work just like it was, you can place the following code to your template file.</p>\n<p><code>twig\n{{ include_file('Data/Add') }}</code> </p>\n<p>Now, you have a add form page, just working as it was but now, you can add new code blocks to top or bottom of the page.</p>\n<blockquote>\n<p>'}\n```</p>\n</blockquote>\n<p>Add Action button to right:</p>\n<p>```smarty\n{$action_buttons.right[] = '<a class=\"btn14 mr5 topDir\" href=\"/admin/order/list?customer_id=\\&lt;id&gt;\" original-title=\"Customer Orders\" title=\"\"><img alt=\"\" src=\"/assets/core/admin/images/icons/dark/cart.png\"/>ierarchy_column_name = 'parent_id';</a></p>\n<pre><code>public function addAction($id = \"\", $extra = \"\")\n{\n    parent::addAction($id, $extra);\n}\n\npublic function editAction($id, $extra = '')\n{\n    parent::editAction($id, $extra);\n}\n\npublic function listAction($id, $extra)\n{\n    parent::listAction($id, $extra);\n}\n</code></pre>\n<p>}\n```</p>\n<h4>Add Page</h4>\n<p>If you want to customize add page, you can create a file called Add.twig as <code>app/Views/Cms/Article/Add.twig</code></p>\n<p>When you create an empty file, you can see that, add form page will also change to a blank page. If you want your custom \npage to work just like it was, you can place the following code to your template file.</p>\n<p><code>twig\n{{ include_file('Data/Add') }}</code> </p>\n<p>Now, you have a add form page, just working as it was but now, you can add new code blocks to top or bottom of the page.</p>\n<blockquote>\n<p>'}\n```</p>\n<p>[!TIP]\nAs you see in the examples above, you can reach columns by using <code>&lt;field_name&gt;</code> syntax. <code>&lt;id&gt;</code> will be translated into <code>id</code> of the row.  </p>\n</blockquote>\n<p>You can also hide default action buttons if you would like to add them manually.</p>\n<p>Example template for hiding default action buttons (View / Edit / Delete)</p>\n<p><code>twig\n{{ include_file(\"Data/List\", {\n    hide_action_buttons: true\n}) }}</code></p>\n<blockquote>\n<p>[!WARNING]\nhide_action_buttons parameter doesn't revoke user permissions. It just removes buttons from admin panel visually. If you want \nto limit access for user, please check <a href=\"https://thebutterfly.io/docs/#/object?id=permissions\">permissions</a> page.</p>\n</blockquote>\n<h5>Field Based</h5>\n<p>You may want to change look &amp; feel or functionality of a specific Object Field.</p>\n<blockquote>\n<p>[!TIP]\nYou can use <code>bin/butterfly publish:admin:template articles list title</code> command to generate customization template for specific field.</p>\n</blockquote>\n<p>Example:</p>\n<p>If you want to change look &amp; feel of <code>title</code> column of <code>articles</code> object, then you can create a file in <code>app/Views/Cms/Article/List/Title.twig</code></p>\n<p>When you create an empty template, you can see that the field will be empty in listing page. You have a variable named <code>$l</code> in the template.</p>\n<p>If you want to display of your field you can use the following code:</p>\n<p><code>twig\n{{ record[field.column_name] }}</code></p>\n<p>or, you can use the field name instead</p>\n<p><code>twig\n{{ record.title }}</code></p>\n<h5>Hiearchical Lists</h5>\n<p>When you have an object with Self Child &gt; Parent relationship, you may want to display main records in the first page with a button.\nFor example: You may have an object of multiple depth category having a column named <code>parent_id</code> which means that, Main records will \nhave parent_id = <code>0</code> and others will have the <code>id</code> of the parent record.</p>\n<p>By default, all records including parent and child ones will be listed together.</p>\n<p>Apply following steps to make admin panel hiearchical:</p>\n<p>Let's think that, you have object with table name: <code>categories</code> and <code>parent_id</code> hiearchical column.</p>\n<p><code>bash\nbin/butterfly publish:admin:controller categories</code></p>\n<p>will create (if not exists)</p>\n<p><code>bash\napp/Controller/Cms/Category.php</code></p>\n<p>Add <code>$list_hierarchy_column_name</code> variable to the class</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Controller\\Cms;</p>\n<p>use Butterfly\\Library\\ObjectController;</p>\n<p>class Category extends ObjectController\n{\n    public $list_hierarchy_column_name = 'parent_id';</p>\n<pre><code>public function addAction($id = \"\", $extra = \"\")\n{\n    parent::addAction($id, $extra);\n}\n\npublic function editAction($id, $extra = '')\n{\n    parent::editAction($id, $extra);\n}\n\npublic function listAction($id, $extra)\n{\n    parent::listAction($id, $extra);\n}\n</code></pre>\n<p>}\n```</p>\n<h4>Add Page</h4>\n<p>If you want to customize add page, you can create a file called Add.twig as <code>app/Views/Cms/Article/Add.twig</code></p>\n<p>When you create an empty file, you can see that, add form page will also change to a blank page. If you want your custom \npage to work just like it was, you can place the following code to your template file.</p>\n<p><code>twig\n{{ include_file('Data/Add') }}</code> </p>\n<p>Now, you have a add form page, just working as it was but now, you can add new code blocks to top or bottom of the page.</p>\n<blockquote>\n<p>[!TIP]\nYou can use <code>bin/butterfly publish:admin:template articles add</code> command to generate customization template.</p>\n</blockquote>\n<h4>Edit Page</h4>\n<p>If you want to customize add page, you can create a file called edit.tpl as <code>app/Views/Cms/Article/Edit.twig</code></p>\n<p>When you create an empty file, you can see that, edit form page will also change to a blank page. If you want your custom \npage to work just like it was, you can place the following code to your template file.</p>\n<p><code>twig\n{{ include_tpl(\"Data/Edit\") }}</code> </p>\n<p>Now, you have a edit form page, just working as it was but now, you can add new code blocks to top or bottom of the page.</p>\n<blockquote>\n<p>[!TIP]\nYou can use <code>bin/butterfly publish:admin:template articles edit</code> command to generate customization template.</p>\n</blockquote>\n<h4>Behaviour Customisation with Javascript</h4>\n<p>Butterfly makes it easy to input data for most cases but you may want to extend behaviours independently. You can do this by editing\nJS Code of the element.</p>\n<p>There are some special keywords to reach current element's DOM.</p>\n<p>keyword | description | example\n--- | --- | ---\n%element% | will reach the element in jQuery syntax | <code>%element%</code> will be replaced by <code>$('#button_type4')</code> if the column_name is button_type and the element is the 4th element in that page.\n%id% | will reach the id of the current element | <code>%id%</code> will be replaced by <code>`button_type4</code> if the column_name is button_type and the element is the 4th element in that page\n%container% | will reach the container of the element in jQuery syntax | <code>%container%' will be replaced by</code>$('#button_type4').parent().parent()` if the column_name is button_type and the element is the 4th element in that page.</p>\n<p><strong>Example Usages:</strong></p>\n<p><code>javascript\nvar value = %element%.val();\nalert(value);</code></p>\n<p>will alert the value of the current element.</p>\n<h5>Conditional Show/Hide</h5>\n<p>When you need to show / hide other elements based on value of an Object Spec's value, you can use Conditional Show/Hide helper.\n<code>.condition</code> function is used for this purpose.</p>\n<p><strong>Example Usage:</strong></p>\n<p><code>javascript\n%element%.condition({\n    \"FirstValue\": [\"image\", \"title\", \"label\"],\n    \"SecondValue\": [\"image\"],\n    \"ThirdValue\": [\"subtitle\"] \n});</code></p>\n<p>will hide Object Specs with column name: <code>image</code>, <code>title</code>, <code>label</code>, <code>subtitle</code> and will show the Object Specs based on the \nvalue of the current Object Spec. For example: if the value is <code>ThirdValue</code> it will show Object Spec with column name: <code>subtitle</code>.</p>\n<h5>Loading Message</h5>\n<p>You can customize loading messages and failure redirection for <code>add</code>, <code>edit</code> and <code>duplicate</code> operations.</p>\n<p><code>javascript\nwindow.blockMessage = 'Report is being created.';\nwindow.onFailureRedirect = '/admin/example-table-name/latest';</code></p>"
        }
    ]
}