{
    "file_name": "migrations.md",
    "sections": [
        {
            "header": "Migrations",
            "content": "\n<p>When you are maintaining a software with database, it's obvious that you may need database changes.</p>\n<ul>\n<li>You may create new tables</li>\n<li>You may add new columns to existing tables</li>\n<li>You may create new Objects</li>\n<li>You may create new Object Specs for existing Objects</li>\n<li>You may update Objects</li>\n<li>You may update Object Specs</li>\n</ul>\n<p>Migrations are placed in <code>Migration</code> folder for each Module. If you need Migrations for your App, than you can use Migrations\nin <code>app/Migration</code> folder.</p>\n<p>There are two types of Migrations</p>\n<ul>\n<li><a href=\"#Install\">Install</a></li>\n<li><a href=\"#Upgrade\">Upgrade</a></li>\n</ul>\n"
        },
        {
            "header": "Install",
            "content": "\n<p>Install migrations run when the system is installed to a new database. Which means that, you can assume that, target database is empty\nwhen you add a new migration.</p>\n<blockquote>\n<p>[!TIP]\nAs an example: If you want to change name of a table, you can directly rename it if it already exists in Install script. \nSince Installation only runs for empty databases, it will not have a table with the previous name.</p>\n</blockquote>\n<p>You can use the following command to run migrations:</p>\n<p><code>bash\nbin/butterfly install</code></p>\n"
        },
        {
            "header": "Generator",
            "content": "\n<p>Install script aims to install an application from scratch. You may want to generate or update Install script with the following command:</p>\n<p><code>bash\nbin/butterfly object:migration:create</code></p>\n<p>This command will update app/Migration/Install.php with the migrations of all Data Types in the active database.</p>\n<p>You can also filter table names</p>\n<p><code>bash\nbin/butterfly object:migration:create --tables=users,faqs</code></p>\n<p>will generate migration for Data Type: users and faqs tables.</p>\n<p>You may also use wildcards for table names</p>\n<p><code>bash\nbin/butterfly object:migration:create --tables=user%</code></p>\n<p>will generate a single migration file with tables starting with user*.</p>\n"
        },
        {
            "header": "Upgrade",
            "content": "\n<p>Upgrade migrations should run after each deployment. Upgrade migrations make it easy to maintain structure of your Database. Besides creating new Tables, Objects, Indexes, you can also delete or update \nexisting ones using Upgrades.</p>\n<p>You can use the following command to run migrations:</p>\n<p><code>bash\nbin/butterfly upgrade</code></p>\n<p>For migrations not to run more than once, you can use version numbers. Butterfly uses <a href=\"https://semver.org/\">semantic versioning</a> to version the Modules. Version numbers are written in module.yaml files. For more information about Modules \nyou can check <a href=\"https://thebutterfly.io/docs/#/modules\">Modules documentation</a></p>\n<p>Example:</p>\n<p>```php\nnamespace App\\Migration;</p>\n<p>use Butterfly\\Framework\\Migration\\Base;</p>\n<p>class Upgrade extends Base\n{\n    public function run()\n    {\n        if($this-&gt;currentVersionIsOlderThan('1.0.1'))\n        {\n            // Put some Migration Script code here\n        }\n    }\n}\n```</p>\n"
        },
        {
            "header": "Indexes",
            "content": "\n<p>You can add Unique or Normal index to the Objects you have created.</p>\n<h3>Index</h3>\n<p>```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;string('name');\n    $object-&gt;dropdown('user_id', 'User')\n        -&gt;parameters('users', 'name', 'id', '-')\n        -&gt;searchable()\n        -&gt;listColumn()\n        -&gt;readonly()\n        -&gt;index() // This will add index to column user_id\n        -&gt;required()\n    ;</p>\n<pre><code>return $object;\n</code></pre>\n<p>});\n```</p>\n<h3>Unique Index</h3>\n<p>```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;string('name');</p>\n<pre><code>$object-&gt;string('remote_user_id')-&gt;unique(); // This will add unique index to remote_user_id column\n\nreturn $object;\n</code></pre>\n<p>});\n```</p>\n<h3>Multiple Columns</h3>\n<p>```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;string('title');\n    $object-&gt;string('sub_title');</p>\n<pre><code>$object-&gt;unique(['title', 'sub_title']); // This will add unique index to title and sub_title columns together.\n\n$object-&gt;index(['title', 'sub_title']); // This will add normal index to title and sub_title columns together.\n\nreturn $object;\n</code></pre>\n<p>});\n```</p>\n"
        },
        {
            "header": "App Specific Migrations",
            "content": "\n<p>You can also use Migrations in <code>app</code> Folder. <code>app</code> is considered as a Module inside of the System. Which means that, you can \nupdate your modules version from <code>app/module.yaml</code> and you can write down Migration scripts in <code>app/Migration/Install.php</code> and \n<code>app/Migration/Upgrade.php</code> files.</p>\n"
        },
        {
            "header": "Migration Scripts",
            "content": "\n<h3>Objects</h3>\n<h4>Create or Update</h4>\n<p>Object Migrations works with upsert strategy. Which means that, when you write down a migration, if the target Object already exist, it will update the existing Object. If it doesn't exist, it will insert new Object.</p>\n<blockquote>\n<p>[!WARNING]\nIf you create a migration for an existing object and you don't define all of the existing Specs, it <code>won't</code> delete existing Object Specs.</p>\n<p>[!WARNING]\nObjects check existence with <code>table_name</code>. If you want to rename an existing Object, then you can check Renaming Object Table Names section.</p>\n</blockquote>\n<p>Example:</p>\n<p>```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;setDescription('Sample Description for Object');\n    $object-&gt;hasItem();\n    $object-&gt;hasTrash();\n    $object-&gt;hasOrder();\n    $object-&gt;setDatabaseAlias('test');\n    $object-&gt;setAutoIncrementColumnName('entity_id');\n    $object-&gt;setLinkFormat('%name%');\n    $object-&gt;string('name');</p>\n<pre><code>$object-&gt;integer('votes');\n$object-&gt;integer('vote_count')-&gt;defaultValue(100);\n$object-&gt;dropdown('user_id', 'User')\n    -&gt;parameters('users', 'name', 'id', '-')\n    -&gt;searchable()\n    -&gt;listColumn()\n    -&gt;readonly()\n    -&gt;required()\n;\n\n$object-&gt;datetimeMysql('created_at')-&gt;defaultValue(db()-&gt;raw('CURRENT_TIMESTAMP()'));\n\nreturn $object;\n</code></pre>\n<p>});\n```</p>\n<h4>Defining Object Spec Position (Placement)</h4>\n<p>When creating additional Object Specs, you can choose the relative position of the newly created Object Spec.</p>\n<p>Example:</p>\n<p>```php\ndb()-&gt;schema('my_new_table')-&gt;objectSpecs(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n            $object-&gt;integer('votes')-&gt;placeAfter('test');\n            $object-&gt;integer('vote_count')-&gt;defaultValue(100)-&gt;placeBefore('test_2');</p>\n<pre><code>        return $object;\n    });\n</code></pre>\n<p>```</p>\n<p>will place <code>votes</code> Object Spec, after <code>test</code> column and will place <code>vote_count</code> Object Spec, before <code>test_2</code> column. </p>\n<blockquote>\n<p>[!WARNING]\nBy default, new Object Specs are placed Left Side Bottom. If target Column Name is not found, Default rules are applied. </p>\n</blockquote>\n<h4>Creating Admin Menus for Objects</h4>\n<p>You can create admin menus while creating an Object using Migrations.</p>\n<h5>With Parent Menu</h5>\n<p>Example:\n```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {</p>\n<pre><code>// This will create System Settings &gt; Sub System Settings &gt; My New Table    \n$object-&gt;setAdminParentMenu('System Settings', 'Sub System Settings');\n\n// You can update Menu Title. If you don't call this function it will default to Object Name\n$object-&gt;setAdminMenuTitle('My Menu Title');\n\nreturn $object;\n</code></pre>\n<p>});\n```</p>\n<h5>Without Parent Menu</h5>\n<p>If you want to create a Main Menu to link to Object Listing Page, you can use the following example:</p>\n<p>Example:\n```php\n$response = db()-&gt;schema('my_new_table')-&gt;object(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    // This will create a Main Menu with title: My Menu Title<br/>\n    $object-&gt;setAdminMenuTitle('My Menu Title');</p>\n<pre><code>// If you don't set the first argument, it will default to Object Name  \n$object-&gt;setAdminMenuTitle(); // will create a menu with title: My New Table\n\nreturn $object;\n</code></pre>\n<p>});\n``` </p>\n<h4>Renaming Table Names</h4>\n<p>You can rename table names of existing Objects.</p>\n<p><code>php\ndb()-&gt;schema('old_table_name')-&gt;object(function (\\Butterfly\\Framework\\Data\\ButterflyObject $butterflyObject) {\n    $butterflyObject-&gt;setName('Desired Object Name');\n    $butterflyObject-&gt;renameTable('new_table_name');\n});</code></p>\n<blockquote>\n<p>[!TIP]\nRenaming table name will change the name of Object. You may use <code>setName</code> function to override auto-generated object name </p>\n</blockquote>\n<h4>Creating new Object Specs</h4>\n<p>You can create new Object Specs for existing Objects using Migrations.</p>\n<p>Example:</p>\n<p>```php\n$response = db()-&gt;schema('my_existing_table')-&gt;objectSpecs(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;integer('votes');\n    $object-&gt;integer('vote_count')-&gt;defaultValue(100);</p>\n<pre><code>return $object;\n</code></pre>\n<p>});\n```</p>\n<blockquote>\n<p>[!TIP]\nYou can also check Create or Update Object section for adding new Specs to existing Objects. It will also upsert Object Specs.  </p>\n</blockquote>\n<h4>Removing Object Specs</h4>\n<p>You can remove an existing Object Specs using Migrations.</p>\n<p>Example:</p>\n<p><code>php\n$cmsObjectModel = new \\Butterfly\\Core\\Model\\CmsObject();\n$cmsObjectModel-&gt;removeObjectSpec('test_table_name', 'test_column_name');</code></p>\n<p>will remove Object Spec with column name: <code>test_column_name</code> of the Object with table name: <code>test_table_name</code></p>\n<blockquote>\n<p>[!WARNING]\nThis function removes column from database. Please beware that all data in the column will be destroyed.</p>\n</blockquote>\n<h4>Overriding Column Type</h4>\n<p>Sometimes you may need different column types in database, for example: default column type for integers is <code>int(11)</code> but\nyou may want to increase the limit and update it to <code>bigint(20)</code>. You can use <code>columnType</code> function to update column type.</p>\n<p>Example:\n```php\n$response = db()-&gt;schema('my_existing_table')-&gt;objectSpecs(function(\\Butterfly\\Framework\\Data\\ButterflyObject $object) {\n    $object-&gt;integer('votes');\n    $object-&gt;integer('vote_count')-&gt;columnType('bigint(20)');</p>\n<pre><code>return $object;\n</code></pre>\n<p>});\n```</p>"
        }
    ]
}