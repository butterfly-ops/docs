{
    "file_name": "data-types.md",
    "sections": [
        {
            "header": "Data Types",
            "content": "\n"
        },
        {
            "header": "Introduction",
            "content": "\n<p>Objects are one of the most special component of Butterfly. Objects are tables with detailed definition.\nWhile defining your object, you can define Url, Table Name, User Friendly Name etc. After defining your objects, you can\nstart editing your contents from your admin panel, without writing a single line of code.</p>\n<p>When you create an Object from <code>butterfly panel</code> or <code>upgrade migration</code>, <code>table</code> (for SQL) or <code>collection</code> (for MongoDB) or <code>index</code> (for ElasticSearch) is automatically generator\nwhich means that, you don't need to make Database creations manually.</p>\n<p>You can checkout <a href=\"https://thebutterfly.io/docs/#/data-manager\">Data Manager documentation</a> for a brief introduction to Data Manager.</p>\n"
        },
        {
            "header": "Data Fields",
            "content": "\n<p>All data types have their names and fields. For example: If you have data type named <code>blog_posts</code>, you would possibly need a \nData Field named <code>title</code> with a type of <code>String</code>.</p>\n<p>When you create an admin panel or using a migration script, <code>columns</code> (for SQL), <code>fields</code> (for MongoDB), <code>mapping</code> for Elastic Search is automatically created.</p>\n<p>In other words, Data Field is equavilant to <code>columns</code> in SQL.</p>\n<h3>String</h3>\n<p>Strings are field types which have a short text (maximum length: 255).</p>\n<p>Parameters:</p>\n<p>Name | Column Name | Description\n--- | --- | ---\nLimit| val_1 | Limits the number of characters in string. </p>\n<h3>Autocomplete</h3>\n<p>When you have more than one Data Type, you may need to link them. For example: If you have an E-commerce Orders Data Type, you would have a Customers Data Type,\nAutocomplete Field Type makes it easier to link your fields.</p>\n<p>Parameters:</p>\n<p>Name | Column Name | Description\n--- | --- | ---\nSource Data Type | val_1 | Data Type you want to link\nDisplay Field | val_2 | Data Field to be shown in listings\nValue Field | val_3 | Source Data Field to be saved into current field\nCondition | val_4 | Where clause for the source records</p>\n<blockquote>\n<p>[!TIP]\nFor a cleaner database schema, Butterfly suggests following naming convention standard: If you want to link a field to other tables id column,\nyou can name the singular version of the table name followed by <code>_id</code>. For example: If your Source Data Type is <code>customers</code> you can name field type as\n<code>customer_id</code>. When you use this syntax, Butterfly automatically detects the relationship and select rest inputs in <code>Data Field creation Admin Panel</code></p>\n</blockquote>\n<h4>Updating minimum character length</h4>\n<p>By default autocomplete field type sends request when minimum character length is 2. You can update by applying following updates:</p>\n<p>1) publish template of the page you want to override behaviour using <code>bin/butterfly publish:admin:template</code> table_name action\n2) add following javascript to that page:\n```html</p>\n<script>\n  window.minCharacterLength = 1;\n</script>\n<p>```</p>\n<blockquote>\n<p>[!TIP]\nIf you want to change behaviour for all pages, you can simply use <code>bin/butterfly publish:admin:layout</code> to publish container layout for all pages and set the variable \nfor all pages.</p>\n</blockquote>\n<h3>Color Picker</h3>\n<p>Color Picker Type provides a color picker for inputs. It stores color code as like FFFFFF.</p>\n<p><img alt=\"Nested Field Type\" src=\"images/colorpicker.png\" title=\"Color Picker UI\"/></p>\n<blockquote>\n<p>[!TIP]\nNotice that color picker saves colors without '#' prefix.</p>\n</blockquote>\n<h3>Datetime</h3>\n<p>Datetime Field type is used to store Date &amp; Time information in <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Timestamp format</a>.\nWhen you use this field type, it will create a column with type integer, since Unix Timestamp format designates the number of seconds \nhave passed since 1th of January 1970.</p>\n<p>This field type is suitable for Release Date's, Expiry Date's, Event Dates etc. Since it includes time and starts from 1970, we don't recommend this field type to be used \nfor birth dates.</p>\n<blockquote>\n<p>[!TIP]\nWhen you need a content to be disappear from site before Release Date or Expiry Date automatically, you can use the following special column names:\n<code>release_date</code> for Publication Dates and <code>expiry_date</code> for auto Expiration.</p>\n</blockquote>\n<h3>Checkbox</h3>\n<p>Checkbox Field type displays a checkbox as it's name describes. It will create a column with type tinyint.</p>\n<p>It will save value \"1\" if field is checked and \"0\" if it's not checked. </p>\n<h3>Image Upload</h3>\n<h4>Introduction</h4>\n<p>Image Upload field type is a specialized Image Upload Tool. You can upload images, generate sub images, crop images from Admin Panel.\nYou can also enable Media Library for re-using uploaded images.</p>\n<p>Parameters:</p>\n<p>Name | Column Name | Description\n--- | --- |---\nAlias | val_1 | Image Upload alias to define upload paths, manipulation options etc.</p>\n<p>Supported file types are:</p>\n<ul>\n<li>jpg, jpeg</li>\n<li>png</li>\n<li>gif</li>\n<li>svg</li>\n</ul>\n<blockquote>\n<p>[!TIP]\nButterfly has support for cropping / resizing <code>gif</code> images. Which means that, you can upload gif images and if defined,\nit will be resized or cropped without loosing the animation. </p>\n<p>[!WARNING]\nSince SVG is a format composed of XML, image manipulation operations are not supported when you upload svg files.</p>\n</blockquote>\n<h4>Operation Types</h4>\n<h5>No Operation</h5>\n<p>Image will not be updated. Just uploaded as is.</p>\n<h5>Resize</h5>\n<p>Image will be resized first to resize in a box with given sizes.</p>\n<p>For example:\nIf you have an image with size: 1000x1200 and the configution is set to resize image to 600x600. The image will be\nresized to 500x600</p>\n<blockquote>\n<p>[!TIP]\nYou can define just one dimension to fit the image to that dimension. Other dimension will resized respectively constraining proportion.</p>\n</blockquote>\n<h5>Center Crop</h5>\n<p>Image will be resized first and cropped from wider size that outfits given sizes.</p>\n<p>For example:\nIf you have an image with size: 1000x1200 and the configution is set to center crop image to 500x500.\n First, the image will be resized to 500x600, then it will be cropped to 500x500 which means that, 50px from both side\n of the image will be removed.</p>\n<h5>Fill</h5>\n<p>Image will be resized first to resize in a box with given sizes. Then it will be filled with given fill color to fit given size.</p>\n<p>For example:\nIf you have an image with size: 1000x1200 and the configution is set to fill image to 600x600\n First, the image will be resized to 500x600 then it will be filled with solid color (white by default) to fit 600x600</p>\n<h3>Block</h3>\n<p>While creating content, you can use texterea if you don't have styles or other type of contents like image or so in your content; \nanother alternative is textarea_with_editor which includes a Text Editor.</p>\n<p>Problem with Rich Text Editors is it creates HTML output which is nearly impossible to process on Mobile Applications or so.</p>\n<p>Block field type is as it's name designates is a rich text content editor which outputs JSON including json information about Blocks.</p>\n<p>You can enable / disable blocks per Data Field and also you can add custom blocks for your Field Type.</p>\n<p>You can check <a href=\"https://editorjs.io\">EditorJS Website</a> for more information about EditorJS. </p>\n<h3>Nested</h3>\n<p>When you want to store your multiple rows / fields in a single field as JSON, you can use Nested Field Type.</p>\n<p>As it's name explains, in nested fields, you can build your JSON using other field types.</p>\n<p>Parameters:</p>\n<p>Name | Column Name | Description\n--- | --- |---\nConfiguration | val_1 | Field Configuration of the field as YAML (Example is below)\nSortable | val_2 | Whether sub-fields can be sorted or not.\nMultiple | val_3 | If yes, you can add multiple rows</p>\n<p>Example Configuration:</p>\n<p><code>yaml\ntitle:\n    name: 'Title'\n    type: 'string'\nimage:\n    name: 'Image'\n    type: 'image_upload'\n    val_1: 'content'</code></p>\n<p>will save the data in Database like follows:</p>\n<p><code>json\n[\n  {\n    \"title\": \"Test Title\",\n    \"image\": \"content/12-10/01/test.png\"\n  }   \n]</code></p>\n<p>will output:</p>\n<p><img alt=\"Nested Field Type\" src=\"images/nested-field-1.png\" title=\"Nested Field Type\"/></p>\n<blockquote>\n<p>[!TIP]\nYou can use nested field recursively, which means that, you can build endlessly deep JSON using the following example.</p>\n</blockquote>\n<p>More complex example:</p>\n<p><code>yaml\ntest:\n    name: 'Test'\n    type: string\npeople:\n    name: 'People'\n    type: nested\n    val_1:\n        name:\n            name: 'Name'\n            type: string\n        surname:\n            name: 'Surname'\n            type: string\n        images:\n            name: 'Images'\n            type: nested\n            val_1:\n                title:\n                    name: 'Title'\n                    type: string\n                image:\n                    name: 'Image'\n                    type: image_upload\n                    val_1: content\n                people:\n                    name: 'Credits'\n                    type: 'nested'\n                    val_1:\n                        name:\n                            name: 'Name'\n                            type: 'string'\n            val_2: 1\n            val_3: 1\n    val_2: 1\n    val_3: 1</code></p>\n<p>will save the data in Database like follows:</p>\n<p><code>json\n[\n  {\n    \"test\": \"Test\",\n    \"people\": [\n       {\n        \"name\": \"Test\",\n        \"surname\": \"Surname\",\n        \"images\": [\n          {\n            \"title\": \"Test\",\n            \"image\": \"20-09/01/test.png\",\n            \"credits\": [\n              {\n                \"name\": \"Name - 1\"\n              },\n              {\n                \"name\": \"Name - 2\"\n              }     \n            ]   \n          }   \n        ]\n       }  \n    ]\n  },\n  {\n      \"test\": \"Test - 2\",\n      \"people\": [\n         {\n          \"name\": \"Test - 2\",\n          \"surname\": \"Surname\",\n          \"images\": [\n            {\n              \"title\": \"Test - 2\",\n              \"image\": \"20-09/01/test-2.png\",\n              \"credits\": [\n                {\n                  \"name\": \"Name - 3\"\n                },\n                {\n                  \"name\": \"Name - 4\"\n                }     \n              ]   \n            }   \n          ]\n         }  \n      ]\n    }  \n]</code></p>\n<p>will output:</p>\n<p><img alt=\"Complex Example for Nested Field Type\" src=\"images/nested-field-2.png\" title=\"Complex Example for Nested Field Type\"/></p>\n<h3>Code</h3>\n<p>Code Field Type, displays a Code Editor in Admin. It automatically checks for Syntax error and highlights codes to present \na user-friendly Code Input.</p>\n<p>Supported Languages:\n* css\n* html\n* javascript\n* json\n* smarty\n* xml\n* yaml\n* twig</p>\n<p>Parameters:</p>\n<p>Name | Column Name | Description\n--- | --- |---\nLanguage | val_1 | Code Language</p>\n<h3>From List</h3>\n<p>From List field lists given options as dropdown and saves value in database.</p>\n<p>Name | Column Name | Description\n--- | --- |---\nOptions | val_1 | Options sepereated by <code>|</code></p>\n<blockquote>\n<p>[!TIP]\nFrom List is useful when you have predefined list of options that doesn't \nneed to be added by your end-users from Admin. If you need non-developer users to \nadd options, it is better to use <code>Dropdown Field Type</code>.</p>\n</blockquote>\n<p>There are two ways to define options:</p>\n<h4>Key to Value</h4>\n<p>You can define key:value options in <code>val_1</code> </p>\n<p>Example:\n<code>1:Yes|2:No</code></p>\n<p>This will list Yes and No in Dropdown and save 1 or 2 in database upon users selection.</p>\n<h4>Value List</h4>\n<p>You can define value options in <code>val_1</code></p>\n<p>Example:\nYes|No</p>\n<p>This will list Yes and No in Dropdown and save selected value in database as Yes or No.</p>\n<h3>Constant</h3>\n<h3>Content Pool</h3>\n<h3>Date</h3>\n<h3>Datetime SQL</h3>\n<h3>Decimal</h3>\n<h3>Dropdown</h3>\n<h3>Dropdown from Class</h3>\n<h3>File Upload</h3>\n<h3>Float</h3>\n<h3>Folder List</h3>\n<h3>Hidden Integer</h3>\n<h3>Hidden String</h3>\n<h3>Hierarch</h3>\n<h3>Image Map</h3>\n<h3>Image Upload Multiple</h3>\n<h3>Integer</h3>\n<h3>Link</h3>\n<h3>Money</h3>\n<h3>Month</h3>\n<h3>Multicheckbox</h3>\n<h3>Password</h3>\n<h3>Remote Image</h3>\n<h3>Slider</h3>\n<h3>Slug</h3>\n<h3>Status</h3>\n<h3>Tag</h3>\n<h3>Textarea</h3>\n<h3>Textarea with Editor</h3>\n<h3>Time Period</h3>\n<h3>Yes / No</h3>\n"
        },
        {
            "header": "Data Validation",
            "content": "\n<p>Butterfly allows field based data validation with these options;</p>\n<ul>\n<li>Email</li>\n<li>Phone</li>\n<li>Password</li>\n<li>Url</li>\n<li>Unique</li>\n<li>Accessibility</li>\n</ul>\n"
        },
        {
            "header": "Permissions",
            "content": "\n<p>You can define permissions per Object / per User Group in Butterfly Panel.</p>\n<p>There are three main types of permissions:</p>\n<ul>\n<li><a href=\"#generic-permissions\">Generic Permissions</a></li>\n<li><a href=\"#permission-exceptions\">Permission Exceptions</a></li>\n<li><a href=\"#custom-permissions\">Custom Permissions</a></li>\n</ul>\n<h3>Generic Permissions</h3>\n<p>Using Generic Permissions, you can define permissions for each Object / Object Spec.</p>\n<blockquote>\n<p>[!TIP]\nYou can define permission exceptions to limit the User's permission to the defined Record Set. For example: You may want to \ngrant user to edit Products in a specific Category. Or you may want your Junior Editor's to create Articles in a Pending State.\nThis definitions are handled in <a href=\"#permission-exceptions\">Permission Exceptions</a>.</p>\n</blockquote>\n<h4>Add Permission:</h4>\n<p>This permission grants user to add a new Record to the Object.  </p>\n<h4>Edit</h4>\n<p>This permission grants user to edit an existing Record of the Object.</p>\n<h4>View</h4>\n<p>This permission grants user read only view access for existing Records of the Object </p>\n<h4>Delete</h4>\n<p>This permission grants user delete permission for Records of the Object.</p>\n<h3>Permission Exceptions</h3>\n<p>You may want to grant user to edit Products in a specific Category. Or you may want your Junior Editor's to create Articles in a Pending State.</p>\n<h3>Custom Permissions</h3>\n<p>Custom Permissions are used for the Custom Permission checks. Permissions are saved in Permission Defitions Object in <code>cms_permissions</code>. You should also\ndefine Permission Groups to group permissions.</p>\n<h4>Check Permission</h4>\n<p>You can check defined permissions for the logged in user using the following example:</p>\n<p><code>php\n$mUser = new \\Butterfly\\Core\\Model\\User();\n$mUser-&gt;checkCustomPermission('sales-order', 'approve');</code></p>\n<p><code>smarty\n{'sales_order::approve'|custom_permission}</code></p>\n<h4>Grant Permission</h4>\n<p>Grant permission is used to Log Custom Permission granted to user.</p>\n<blockquote>\n<p>[!WARNING]\nGrant Permission Work In Progress. You can start using function calls for the future reference.</p>\n</blockquote>\n<p><code>php\n$mUser = new \\Butterfly\\Core\\Model\\User();\n$mUser-&gt;grantCustomPermission('sales-order', 'approve', [\n        'entity_id' =&gt; 1234, \n        'object_id' =&gt; \\Butterfly\\Core\\Model\\Objects::getObjectId('orders'),\n        'comment' =&gt; 'Testing' \n    ]\n);</code></p>\n"
        },
        {
            "header": "Hooks",
            "content": "\n<p>You can intercept operations like Insert, Update or Delete on Panel. For example, you may want to check an external service \nbefore a new entry is added to database, or you may want to send data to an external service.</p>\n<h3>Hook Creation</h3>\n<p>You can create a hook using the following command:</p>\n<p><code>bash\nbin/butterfly make:hook users</code> </p>\n<p>this will create a file in app/Hook/Users.php.</p>\n<p>Then, when a new entry is saved in admin panel, it will run related function in this hook.</p>\n<h3>Event Functions</h3>\n<p>Hook functions are as follows:</p>\n<h4>before_add</h4>\n<p>This function is triggered before adding new entry. You can stop the operation by calling error function, or \nyou can use confirm function to alert user before doing the operation.</p>\n<blockquote>\n<p>When you use before_ functions, since the operation is not done yet, you can run error function; you should use before function if you want to stop operation.</p>\n<p>[!DANGER]\nWe don't have an id yet when before_add operation is triggered.</p>\n</blockquote>\n<p>Following Hook will halt to operation and display an error on screen:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function before_add(Crud &amp;$crud)\n    {\n        $crud-&gt;error('No way !');\n    }\n}\n```</p>\n<h4>after_add</h4>\n<p>This function is triggered after adding new entry. You can use this function if you want to run your trigger\n when entry is actually added.</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function after_add(Crud &amp;$crud)\n    {\n        $data = $crud-&gt;getData();\n        $newId = $crud-&gt;getDataId();</p>\n<pre><code>    // You can call external service with $data variable here\n}\n</code></pre>\n<p>}\n```</p>\n<h4>before_edit</h4>\n<p>This function is triggered before updating an entry. You can also check if there is a difference with previous state using \n<a href=\"#isChanged\"><code>isChanged</code></a> function. You can also get the old info using <a href=\"#getOldData\"><code>getOldData</code></a> function.</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function before_edit(Crud &amp;$crud)\n    {\n        // Following if block will ask user confirmation.\n        if($crud-&gt;isChanged('name'))\n        {\n            $oldData = $crud-&gt;getOldData('name');\n            $newData = $crud-&gt;get('name');</p>\n<pre><code>        $crud::confirm('You are changing name from ' . $oldData . ' to ' . $newData . '. Are you sure?');\n    }\n}\n</code></pre>\n<p>}\n```</p>\n<h4>after_edit</h4>\n<p>This function is triggered after updating an entry.</p>\n<blockquote>\n<p>[!WARNING]\nYou cannot use <code>isChanged</code> and <code>getOldData</code> functions on after_edit section because the data is already updated. Because\nof that, <code>isChanged</code> will always return <code>false</code> and <code>getOldData</code> will return the new data.</p>\n<p>[!TIP]\nYou can use <code>before_edit</code> hook to check <code>isChanged</code> and <code>getOldData</code> and set the data to a variable in <code>$this</code> context. Then,\nyou can use variables you've created to access this information.   </p>\n</blockquote>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    private $nameIsChanged;\n    private $oldName;</p>\n<pre><code>public function before_edit(Crud &amp;$crud)\n    {\n        $this-&gt;nameIsChanged = $crud-&gt;isChanged('name');\n        $this-&gt;oldName = $crud-&gt;getOldData('name');\n    }\n\npublic function after_edit(Crud &amp;$crud)\n{\n    // Now, you can use $this-&gt;nameIsChanged or $this-&gt;oldName variables to access this information.\n}\n</code></pre>\n<p>}\n```</p>\n<h4>before_delete</h4>\n<p>This function is triggered before deleting an entry. You can access the data to be deleted by using <code>$crud-&gt;getDataId()</code> function.\nIt will retrieve the id that will be deleted. Since the operation is not done yet, you can also access the data.</p>\n<h4>after_delete</h4>\n<p>This function is triggered after deleting an entry. Only parameter you can access is the ID <code>$crud-&gt;getDataId()</code> of the entry, since it's deleted from\nthe database. </p>\n<h4>after_save</h4>\n<p>This function is triggered after successfully saving an entry. You can do whatever you need with your entity.</p>\n<p>Example usage for the event to invalidate AMP Cache. Add this class into app\\Hook folder.\n```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Library\\Hook;</p>\n<p>class Objects extends Hook\n{\n    public function afterSave($params)\n    {\n        \\Queue::push(\\Butterfly\\Core\\Task\\AmpCache::class, $params);\n    }\n}\n```</p>\n<h3>Crud Functions</h3>\n<h4>get</h4>\n<p>You can use <code>get</code> function to get value of a specific field.</p>\n<p>Example:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function before_add(Crud &amp;$crud)\n    {\n        $name = $crud-&gt;get('name');</p>\n<pre><code>    // Now we have name value in `$name` variable. You can use it for further operations.\n}\n</code></pre>\n<p>}\n``` </p>\n<h4>error</h4>\n<p>You can trigger error and stop the operation using this function.</p>\n<blockquote>\n<p>[!WARNING]\nYou should use <code>error</code> function with before_ events, since the operation is not done when before_ events are triggered.</p>\n</blockquote>\n<p>Example:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function before_add(Crud &amp;$crud)\n    {\n        $crud-&gt;error('No way !');\n    }\n}\n```</p>\n<h4>confirm</h4>\n<p>You can use confirm function when you want to get yes / no confirmation from user. If user clicks to no, it will cancel \nthe operation. If user clicks OK, then the operation will continue. </p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function before_add(Crud &amp;$crud)\n    {\n        // The following should not be placed before calling confirm function\n        // Because this code will run twice after user confirms the dialog. You can move this function\n        // call after confirm function.\n        db()-&gt;table('test')-&gt;update([\n            'test' =&gt; 5\n        ]);</p>\n<pre><code>    $crud-&gt;confirm('Are you sure?');\n}\n</code></pre>\n<p>}\n```</p>\n<p>!&gt; When you use confirm function, Hook code which is written before confirmation runs twice. You should not write code that \nshould not be called more than once before calling confirm function.</p>\n<h4>getDataId</h4>\n<p>You can use getDataId function to retrieve the id of relevant column.</p>\n<blockquote>\n<p>[!DANGER]\nYou cannot use this function inside of before_add since record is not created yet which means there is no id.</p>\n</blockquote>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Users extends Hook\n{\n    public function after_add(Crud &amp;$crud)\n    {\n        $newId = $crud-&gt;getDataId();</p>\n<pre><code>    // We have the id of new record, so you can use it for further operations.\n}\n</code></pre>\n<p>}\n```</p>\n<h4>getOldData</h4>\n<p>When user saves data from Butterfly Panel, you can get it's previous state using getOldData function.</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Articles extends Hook\n{\n    public function before_edit(Crud &amp;$crud)\n    {\n        $oldTitle = $crud-&gt;getOldData('title');</p>\n<pre><code>    // You have the title of the article you can use it for further operations.\n}\n</code></pre>\n<p>}\n```</p>\n<blockquote>\n<p>[!NOTE]\n<code>getOldData</code> function gets data from Database when it's called. Since database is updated before calling after_ events, if you call this function in after function, it will not work properly and return the latest data. If you need old data in after_ events, then, you can call it in before function and set it to another property.</p>\n</blockquote>\n<h4>isChanged</h4>\n<p>When user saves data in Butterfly Panel, you may want to check if a specific field is changed or not.  </p>\n<blockquote>\n<p>[!WARNING]\n<code>isChanged</code> function returns if the field is changed or not. Since database is updated before calling after_ events, if you call this function in after function, it will not work properly and return the latest data. If you need old data in after_ events, then, you can call it in before function and set it to another property.</p>\n</blockquote>\n<p>In the following example, confirmation dialog will be displayed if the user changed <code>title</code>:</p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Hook;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Articles extends Hook\n{\n    public function before_edit(Crud &amp;$crud)\n    {\n        if($crud-&gt;isChanged('title'))\n        {\n            $oldTitle = $crud-&gt;getOldData('title');\n            $newTitle = $crud-&gt;get('title');</p>\n<pre><code>        $crud-&gt;confirm('You have changed title from : ' . $oldTitle . ' to ' . $newTitle \n            . '. Are you sure?');\n    }\n\n    // You have the title of the article you can use it for further operations.\n}\n</code></pre>\n<p>}\n```</p>"
        }
    ]
}