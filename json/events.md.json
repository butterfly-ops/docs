{
    "file_name": "events.md",
    "sections": [
        {
            "header": "Introduction",
            "content": "\n<p>Events are designed to make changes in behaviours of Butterfly or run custom codes inside of <code>Butterfly Core</code>. </p>\n"
        },
        {
            "header": "Frontend",
            "content": "\n<p>Frontend events are triggered while startup of the Application.</p>\n<h3><code>bootstrap</code></h3>\n<p>To create a Bootstrap hook, you can run the following command:</p>\n<p><code>bash\nbin/butterfly make:event Frontend Bootstrap</code></p>\n<blockquote>\n<p>[!TIP]\nFrontend&gt;Bootstrap event doesnt have any parameters. You can use this event to run codes which should be ran for all requests.</p>\n<p>[!WARNING]\nDon't forget that, the code written inside of Frontend&gt;Bootstrap event will run for each request which means that it may decrease \nperformance of your website.</p>\n</blockquote>\n<h3><code>not_found</code></h3>\n<p>Not Found Event is triggered when a page is not found. Dynamic redirections can be handled in this event. To create a Not Found hook, you can run the following command:</p>\n<p><code>bash\nbin/butterfly make:event Frontend not_found</code></p>\n<p>Example:\n```php\n&lt;?php</p>\n<p>namespace App\\Event;</p>\n<p>use App\\Controller\\Item;\nuse App\\Model\\Article;\nuse Butterfly\\Framework\\Registry\\Registry;\nuse Butterfly\\Library\\Hook;</p>\n<p>class Frontend extends Hook\n{\n    public function not_found($params)\n    {\n        $url = $params['url'];\n        if(preg_match('~en/(.+)~', $url, $tmp))\n        {\n            $mArticle = new Article();\n            $article = $mArticle-&gt;getByCustom_seo_en($tmp[1]);</p>\n<pre><code>        if(! empty($article))\n        {\n            Registry::set('url', $article['seo']);\n            Registry::set('language', 'en');\n\n            $controller = new Item();\n            $controller-&gt;designPrefix = 'en-';\n            $controller-&gt;detailAction();\n            echo $controller-&gt;renderLayout();\n            exit;\n        }\n    }\n}\n</code></pre>\n<p>}\n```</p>\n<h3><code>object::detail</code></h3>\n<p><code>bash\nbin/butterfly make:event:object:detail campaigns</code></p>\n<p>will create </p>\n<p>```php\n&lt;?php</p>\n<p>namespace App\\Event;</p>\n<p>use Butterfly\\Core\\Controller\\Frontend\\Item;\nuse Butterfly\\Library\\Event;</p>\n<p>class Campaigns extends Event\n{\n    public function detail($params)\n    {\n        $info = $params['info'];\n        /*<em> @var Item $controller </em>/\n        $controller = $params['class'];</p>\n<pre><code>    /**\n     * TODO: Make info variable manipulations\n     */\n\n    /**\n     * TODO: Make meta title, meta description manipulations\n     *\n     * Example:\n     * $info['meta_title'] = '';\n     * $info['meta_description'] = '';\n     */\n\n\n    // Assign info to detail controller\n    $controller-&gt;info = $info;\n\n    // Reload Info to make manipulations effective.\n    $controller-&gt;reloadInfo();\n}\n</code></pre>\n<p>}\n```</p>\n<h3>BulkImageUpload::before_add</h3>\n<p>When you are using one-to-many relations with Multi Upload option. You can use this feature to manipulate Bulk Image Uploads.\nSince this trigger is common for all Bulk Image Uploads, you need to narrow it's scope like the following example.</p>\n<p>You can also change one-to-many import behaviour, for example you can define unique_keys to override existing records.</p>\n<p>Example:</p>\n<p>```php\n&lt;?php\nnamespace App\\Hook;</p>\n<p>use Butterfly\\Core\\Model\\Objects;\nuse Butterfly\\Core\\View\\TwigFunction\\ImagePath;</p>\n<p>class BulkImageUpload\n{\n    public function before_add($params)\n    {\n        $object_id = $params['object_id'];\n        $table_name = Objects::getTableName($object_id);</p>\n<pre><code>    if($table_name != 'banner_images_bulk_upload')\n    {\n        return $params;\n    }\n\n    $entity_id = $params['data']['banner_images_bulk_upload_id'];\n\n    $imageUpload = db()\n        -&gt;table('banner_images_bulk_upload')\n        -&gt;find($entity_id)\n    ;\n\n    $path = new ImagePath();\n    $imageBasePath = $path-&gt;execute('content');\n\n    $filename = $params['db_filename'];\n\n    $params['data']['title'] = $imageUpload['title'];\n    $params['data']['link'] = $imageBasePath . $filename;\n    $params['data']['link_webp'] = $imageBasePath . $filename . '.webp';\n\n    // If you want to override existing records, you can define unique_keys\n    $params['unique_keys'] = [\n        'sku', 'position', 'image_type'\n    ];\n\n    return $params;\n}\n</code></pre>\n<p>}\n```</p>\n<h3>AdminUser::before_login</h3>\n<ul>\n<li>When you want to integrate your admin login to SSO or LDAP</li>\n<li>When you would like to implement additional features to admin login like logging, fraud check etc.</li>\n</ul>\n<p>You can use AdminUser::before_login event</p>\n<p>Example:</p>\n<p>```php\n&lt;?php\nnamespace App\\Event;</p>\n<p>use Butterfly\\Framework\\Data\\Crud;\nuse Butterfly\\Library\\Hook;</p>\n<p>class AdminUser extends Hook\n{\n    public function before_login($parameters)\n    {\n        $email = $parameters['email'];\n        $password = $parameters['password'];</p>\n<pre><code>    // Send Request to external system\n    // ....\n\n\n    /**\n    * Check credentials from LDAP, disable login if account is disabled\n\n    return [\n        'success' =&gt; false,\n        'error_message' =&gt; 'Login prohibited'\n    ];\n    */\n\n    /**\n     * Create a record in `users` table and return id to bypass login\n    TODO: Don't forget to map user roles.\n\n     return [\n        'user_id' =&gt; 5\n    ];\n     */\n}\n</code></pre>\n<p>}\n```</p>"
        }
    ]
}