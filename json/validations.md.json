{
    "file_name": "validations.md",
    "sections": [
        {
            "header": "Usage of Validator",
            "content": "\n<p>This document provides a detailed guide on how to use the <code>Validator</code> feature.</p>\n"
        },
        {
            "header": "Using the Validator Trait",
            "content": "\n<h3>1. Include the Trait in Your Class</h3>\n<p>First, you need to include the <code>Validator</code> trait in the class where you want to use it.</p>\n<p>```php\nuse Butterfly\\Core\\Trait\\Validator;</p>\n<p>class SomeClass\n{\n    use Validator;</p>\n<pre><code>...\n</code></pre>\n<p>}\n```</p>\n<h3>2. Using Validation</h3>\n<h4>Example 1: Checking for Validation Errors</h4>\n<p>In the following example, the <code>someAction</code> method validates incoming data and checks for validation errors.</p>\n<p>```php\npublic function someAction()\n{\n    // Validate incoming data\n    if ($response = $this-&gt;validate([\n        'filter' =&gt; [\n            new Assert\\Required(),\n            new Assert\\NotBlank(),\n        ],\n        'sort' =&gt; new Assert\\Optional()\n    ])) {\n        // If there are errors, return the response containing the errors\n        return $response;\n    }</p>\n<pre><code>// Get validated data\n$filter = \\Input::get('filter');\n$sort = \\Input::get('sort');\n\n// Return a successful response\nreturn [\n    'status' =&gt; 'success',\n    'message' =&gt; 'Hello World'\n];\n</code></pre>\n<p>}\n```</p>\n<h4>Example 2: Using Validation Without Checking the Result</h4>\n<p>In this example, the result of the <code>validate</code> method is not checked directly. However, make sure to handle validation errors properly.</p>\n<p>```php\npublic function someAction()\n{\n    // Validate incoming data\n    $this-&gt;validate([\n        'filter' =&gt; [\n            new Assert\\Required(),\n            new Assert\\NotBlank(),\n        ],\n        'sort' =&gt; new Assert\\Optional()\n    ]);</p>\n<pre><code>// Get validated data\n$filter = \\Input::get('filter');\n$sort = \\Input::get('sort');\n\n// Return a successful response\nreturn [\n    'status' =&gt; 'success',\n    'message' =&gt; 'Hello World'\n];\n</code></pre>\n<p>}\n```</p>\n"
        },
        {
            "header": "Defining Validation Rules",
            "content": "\n<p>With Symfony Validator, you can define various validation rules. Here are some examples:</p>\n<p>```php\nuse Symfony\\Component\\Validator\\Constraints as Assert;</p>\n<p>$rules = [\n    'name' =&gt; [\n        new Assert\\Required(),\n        new Assert\\NotBlank(),\n        new Assert\\Length(['min' =&gt; 3, 'max' =&gt; 50])\n    ],\n    'email' =&gt; [\n        new Assert\\Required(),\n        new Assert\\Email()\n    ],\n    'age' =&gt; [\n        new Assert\\Optional(),\n        new Assert\\Type('integer'),\n        new Assert\\Range(['min' =&gt; 18, 'max' =&gt; 99])\n    ]\n];\n```</p>\n<p>You can pass these rules as a parameter to the <code>validate</code> method.</p>\n<p>```php\npublic function someAction()\n{\n    $rules = [\n        'name' =&gt; [\n            new Assert\\Required(),\n            new Assert\\NotBlank(),\n            new Assert\\Length(['min' =&gt; 3, 'max' =&gt; 50])\n        ],\n        'email' =&gt; [\n            new Assert\\Required(),\n            new Assert\\Email()\n        ],\n        'age' =&gt; [\n            new Assert\\Optional(),\n            new Assert\\Type('integer'),\n            new Assert\\Range(['min' =&gt; 18, 'max' =&gt; 99])\n        ]\n    ];</p>\n<pre><code>if ($response = $this-&gt;validate($rules)) {\n    return $response;\n}\n\n// Process validated data\n$name = \\Input::get('name');\n$email = \\Input::get('email');\n$age = \\Input::get('age');\n\nreturn [\n    'status' =&gt; 'success',\n    'message' =&gt; 'Data validated successfully'\n];\n</code></pre>\n<p>}\n```</p>\n<p>These examples demonstrate how to use the <code>validate</code> method and define validation rules. With the flexibility of Symfony Validator, you can easily define and use validation rules that suit your needs.</p>"
        }
    ]
}