{
    "file_name": "frontend.md",
    "sections": [
        {
            "header": "Frontend",
            "content": "\n<p>Butterfly uses <code>twig</code> as the main frontend template engine. Although it's possible to use Smarty, we strongly recommend using \n<code>twig</code> since <code>smarty</code> support will be dropped in the upcoming releases.</p>\n"
        },
        {
            "header": "Layout",
            "content": "\n<p>Butterfly displays pages using <a href=\"https://thebutterfly.io/docs/#/design\">Designs</a>. When you define a Design, you need to create a Layout and choose \nLayout file from butterfly Admin.</p>\n<p>While creating a Layout, you can use the following predefined variables:</p>\n<p>Variable | Variable Type | Description\n--- | --- | ---\npage_title | string | Includes the Page Title rendered from settings defined on Cms Design\npage_description | string | Includes the Page Description rendered from settings defined on Cms Design\nwidgets | array | Includes the widget renders. Detailed example below.</p>\n<h3><code>widgets</code></h3>\n<p><code>twig\n{% for render in widgets.content.renders %}\n    {{ render|raw }}\n{% endfor %}</code></p>\n"
        },
        {
            "header": "Twig Filters",
            "content": "\n<h3><code>count</code></h3>\n<p><code>count</code> filter returns number of elements in an array.</p>\n<p>Example:</p>\n<p><code>twig\n{% if array_variable|count &gt; 1 %}\n    this text will be shown if the array_variable has more then 1 elements. \n{% endif %}</code> </p>\n<h3><code>registry</code></h3>\n<p><code>registry</code> filter is used to get a variable in the butterfly registry or set a variable to butterfly registry.</p>\n<p>to get a variable:\n<code>twig\n{{ 'registry-key'|registry }}</code></p>\n<p>to set a variable:\n<code>twig\n{{ 'registry-key'|registry('value') }}</code></p>\n<h3><code>truncate</code></h3>\n<p><code>truncate</code> filter is used to shorten strings. It returns the first X characters of the string. </p>\n<p>Example:\n<code>twig\n{{ 'Test String'|truncate(4) }}</code></p>\n<p>will output</p>\n<p><code>text\nTest</code></p>\n<h3><code>json_decode</code></h3>\n<p>Twig doesn't come with a <code>json_decode</code> filter by default. You can use <code>json_decode</code> filter to return json encoded string to array.</p>\n<blockquote>\n<p>[!TIP]</p>\n<p><code>json_decode</code> filter converts to array by default (calls the following function: json_decode('JSON_STRING', true);</p>\n</blockquote>\n<h3><code>parse</code></h3>\n<p><code>parse</code> filter is used to process strings and replaces dynamic values into strings. This filter is used to process dynamic strings specially entered from Admin Panel. \nFor example: In Item Detail page, you can enter string <code>%name%</code> from admin, and parse filter will replace <code>%name%</code> to name value of the array.</p>\n<p>Example:</p>\n<p><code>twig\n{{ \"%name% %title%\"|parse(info) }}</code></p>\n<p>will replace values between <code>%</code> from info variable. For example if the column name is name, then, it will search for info.name and replace %name% with info.name</p>\n<h3><code>config</code></h3>\n<p><code>config</code> filter is used to return specific config set in <code>app/Config</code> directory.</p>\n<p>Example:</p>\n<p><code>twig\n{{ 'app.url'|config }}</code></p>\n<p>will return the url of the butterfly setup, which is set in <code>app/Config/app.php</code> with key: <code>url</code>.</p>\n<blockquote>\n<p>[!TIP]\nYou can retrieve inner keys of the config. Example: <code>app.testkey.innerkey</code> will return the <code>testkey-&gt;innerkey</code>\ninside <code>app/Config/app.php</code> </p>\n</blockquote>\n"
        },
        {
            "header": "Twig Functions",
            "content": "\n<h3><code>image_path</code></h3>\n<p><code>image_path</code> function is used to access the full path of image or file aliases.</p>\n<p><code>twig\nimage_path('original')</code> </p>\n<p>will return the full path to access original image alias.</p>\n<h3><code>file_path</code></h3>\n<p><code>file_path</code> function is used to access the full path of image or file aliases.</p>\n<p><code>twig\nfile_path('excel')</code> </p>\n<p>will return the full path to access excel file alias.</p>\n<h3><code>widget</code></h3>\n<p><code>widget</code> function is used to render a widget with given parameters.</p>\n<p>Example:</p>\n<p><code>twig\n{{ widget({name: 'Banner', 'title': 'Hello World'}) }}</code> </p>\n<p>to render admin widgets, you can set admin: true</p>\n<p><code>twig\n{{ widget({name: 'FrontendAdmin', 'admin': true}) }}</code></p>\n<h3><code>image</code></h3>\n<p><code>image</code> function is used to generate an img tag with support of Lazy Loading and Webp.</p>\n<p>Example:</p>\n<p><code>twig\nimage({item:item,alias:\"content\",field:\"field_name\", \"class\":\"test\"})</code></p>\n<p>will return</p>\n<p><code>html\n&lt;img class=\"test\" src=\"https://xxx.com/test.png.webp\" /&gt;</code></p>\n<p>if browser doesn't support webp or if webp not enabled for that image it will return:</p>\n<p><code>html\n&lt;img class=\"test\" src=\"https://xxx.com/test.png\" /&gt;</code></p>\n<p>It has the following parameters:</p>\n<p>Parameter | Description | Default | Required\n--- | --- | --- | ---\n<code>item</code> | Variable including all item data | - | Yes\n<code>alias</code> | Image Config Alias | <code>content</code> | No\n<code>field</code> | Image Field Name | <code>image</code> | No\n<code>class</code> | Class Name | - | No</p>\n<h3><code>image_source</code></h3>\n<p><code>image_source</code> function returns just the image url based on <code>webp</code> and other configurations.</p>\n<p>It has the following parameters:</p>\n<p>Parameter | Description | Default | Required\n--- | --- | --- | ---\n<code>item</code> | Variable including all item data | - | Yes\n<code>alias</code> | Image Config Alias | <code>content</code> | No\n<code>field</code> | Image Field Name | <code>image</code> | No</p>\n<p>will return</p>\n<p><code>html\nhttps://xxx.com/test.png.webp</code></p>\n<p>if browser doesn't support webp or if webp not enabled for that image it will return:</p>\n<p><code>html\nhttps://xxx.com/test.png</code></p>\n<h3><code>include_file</code></h3>\n<p><code>include_file</code> function is used to include twig files. It automatically checks include directories to find the twig templates.\nDefault frontend folders are: <code>app/Views</code>, <code>app/Widgets</code>, <code>Core/View/Frontend</code>.</p>\n<p>Following example will check for <code>app/Views/test.twig</code>, `app/Widget/test.twig' ... and if it finds the file, it will stop.</p>\n<p><code>twig\ninclude_file('test.twig')</code></p>\n<blockquote>\n<p>[!TIP]\nIf you want to extend Frontend Folders, you can use <code>$this-&gt;getView()-&gt;addViewPath('FOLDER_NAME');</code> from any controller. </p>\n</blockquote>\n<h3><code>current_url</code></h3>\n<p><code>current_url</code> function returns the contents of <code>$_SERVER['REQUEST_URI']</code> <a href=\"https://www.php.net/manual/tr/reserved.variables.server.php\">Details</a></p>\n<p>Example:</p>\n<p>When active page is thebutterfly.io/test.html</p>\n<p><code>twig\n{{ current_url() }}</code></p>\n<p>will return</p>\n<p><code>text\n/test.html</code></p>\n<h3><code>setting</code></h3>\n<p><code>setting</code> function is used to return specific setting defined in Admin Panel. </p>\n<p>Example:</p>\n<p><code>twig\n{{ setting('site-settings', 'description') }}</code></p>\n<p>will return the Setting with alias <code>description</code> defined in Setting Group with alias: <code>site-settings</code></p>\n<h3><code>git_version</code></h3>\n<p><code>git_version</code> returns hash of current git version for invalidating asset caches etc.</p>\n<p>You may use git_version function after static files to invalidate browser, cdn or output caches.</p>\n<p>Example usage:\n```twig</p>\n<script src=\"/assets/test.js?v={{ git_version() }}\"></script>\n<p>```  </p>\n<blockquote>\n<p>[!TIP]\nIn production, we recommend removing .git folder. This function checks for .git-version file in the root directory. Which means that, \nyou may put a textfile including your git version or timestamp which will change in each release.\nIf your webserver root folder is <code>/var/www/vhosts/thebutterfly.io/public/</code> you can dump current git version to <code>/var/www/vhosts/thebutterfly.io/.git-version</code>.\nThis file won't be publicly accessible but <code>git_version()</code> function will read this file priorly.  </p>\n</blockquote>"
        }
    ]
}